--AntiCrack---
local LPH_JIT_ULTRA = LPH_JIT_ULTRA or function(...) return ... end
local LPH_NO_VIRTUALIZE = LPH_NO_VIRTUALIZE or function(...) return ... end
LPH_JIT_ULTRA(function()

	repeat wait()
	until game:IsLoaded() 

	local testing = true
	if testing == false then
		spawn(function()
			local GAME = "CombatWarriors" -- BloxFruit, PixelPiece, CombatWarriors
			if rStr == nil then
				return
			end
			local success,err = pcall(function()
				if PASSMOOD ~= nil then
					repeat wait() until false
				end
				repeat wait() until game:GetService("ReplicatedStorage"):FindFirstChild(rStr)
				local BackupData = game:GetService("ReplicatedStorage")[rStr].Value
				wait()
				game:GetService("ReplicatedStorage")[rStr]:Destroy()
				local hash = function(a)local b={[0]={"00","\0"},[1]={"01","\1"},[2]={"02","\2"},[3]={"03","\3"},[4]={"04","\4"},[5]={"05","\5"},[6]={"06","\6"},[7]={"07","\7"},[8]={"08","\8"},[9]={"09","\9"},[10]={"0a","\10"},[11]={"0b","\11"},[12]={"0c","\12"},[13]={"0d","\13"},[14]={"0e","\14"},[15]={"0f","\15"},[16]={"10","\16"},[17]={"11","\17"},[18]={"12","\18"},[19]={"13","\19"},[20]={"14","\20"},[21]={"15","\21"},[22]={"16","\22"},[23]={"17","\23"},[24]={"18","\24"},[25]={"19","\25"},[26]={"1a","\26"},[27]={"1b","\27"},[28]={"1c","\28"},[29]={"1d","\29"},[30]={"1e","\30"},[31]={"1f","\31"},[32]={"20","\32"},[33]={"21","\33"},[34]={"22","\34"},[35]={"23","\35"},[36]={"24","\36"},[37]={"25","\37"},[38]={"26","\38"},[39]={"27","\39"},[40]={"28","\40"},[41]={"29","\41"},[42]={"2a","\42"},[43]={"2b","\43"},[44]={"2c","\44"},[45]={"2d","\45"},[46]={"2e","\46"},[47]={"2f","\47"},[48]={"30","\48"},[49]={"31","\49"},[50]={"32","\50"},[51]={"33","\51"},[52]={"34","\52"},[53]={"35","\53"},[54]={"36","\54"},[55]={"37","\55"},[56]={"38","\56"},[57]={"39","\57"},[58]={"3a","\58"},[59]={"3b","\59"},[60]={"3c","\60"},[61]={"3d","\61"},[62]={"3e","\62"},[63]={"3f","\63"},[64]={"40","\64"},[65]={"41","\65"},[66]={"42","\66"},[67]={"43","\67"},[68]={"44","\68"},[69]={"45","\69"},[70]={"46","\70"},[71]={"47","\71"},[72]={"48","\72"},[73]={"49","\73"},[74]={"4a","\74"},[75]={"4b","\75"},[76]={"4c","\76"},[77]={"4d","\77"},[78]={"4e","\78"},[79]={"4f","\79"},[80]={"50","\80"},[81]={"51","\81"},[82]={"52","\82"},[83]={"53","\83"},[84]={"54","\84"},[85]={"55","\85"},[86]={"56","\86"},[87]={"57","\87"},[88]={"58","\88"},[89]={"59","\89"},[90]={"5a","\90"},[91]={"5b","\91"},[92]={"5c","\92"},[93]={"5d","\93"},[94]={"5e","\94"},[95]={"5f","\95"},[96]={"60","\96"},[97]={"61","\97"},[98]={"62","\98"},[99]={"63","\99"},[100]={"64","\100"},[101]={"65","\101"},[102]={"66","\102"},[103]={"67","\103"},[104]={"68","\104"},[105]={"69","\105"},[106]={"6a","\106"},[107]={"6b","\107"},[108]={"6c","\108"},[109]={"6d","\109"},[110]={"6e","\110"},[111]={"6f","\111"},[112]={"70","\112"},[113]={"71","\113"},[114]={"72","\114"},[115]={"73","\115"},[116]={"74","\116"},[117]={"75","\117"},[118]={"76","\118"},[119]={"77","\119"},[120]={"78","\120"},[121]={"79","\121"},[122]={"7a","\122"},[123]={"7b","\123"},[124]={"7c","\124"},[125]={"7d","\125"},[126]={"7e","\126"},[127]={"7f","\127"},[128]={"80","\128"},[129]={"81","\129"},[130]={"82","\130"},[131]={"83","\131"},[132]={"84","\132"},[133]={"85","\133"},[134]={"86","\134"},[135]={"87","\135"},[136]={"88","\136"},[137]={"89","\137"},[138]={"8a","\138"},[139]={"8b","\139"},[140]={"8c","\140"},[141]={"8d","\141"},[142]={"8e","\142"},[143]={"8f","\143"},[144]={"90","\144"},[145]={"91","\145"},[146]={"92","\146"},[147]={"93","\147"},[148]={"94","\148"},[149]={"95","\149"},[150]={"96","\150"},[151]={"97","\151"},[152]={"98","\152"},[153]={"99","\153"},[154]={"9a","\154"},[155]={"9b","\155"},[156]={"9c","\156"},[157]={"9d","\157"},[158]={"9e","\158"},[159]={"9f","\159"},[160]={"a0","\160"},[161]={"a1","\161"},[162]={"a2","\162"},[163]={"a3","\163"},[164]={"a4","\164"},[165]={"a5","\165"},[166]={"a6","\166"},[167]={"a7","\167"},[168]={"a8","\168"},[169]={"a9","\169"},[170]={"aa","\170"},[171]={"ab","\171"},[172]={"ac","\172"},[173]={"ad","\173"},[174]={"ae","\174"},[175]={"af","\175"},[176]={"b0","\176"},[177]={"b1","\177"},[178]={"b2","\178"},[179]={"b3","\179"},[180]={"b4","\180"},[181]={"b5","\181"},[182]={"b6","\182"},[183]={"b7","\183"},[184]={"b8","\184"},[185]={"b9","\185"},[186]={"ba","\186"},[187]={"bb","\187"},[188]={"bc","\188"},[189]={"bd","\189"},[190]={"be","\190"},[191]={"bf","\191"},[192]={"c0","\192"},[193]={"c1","\193"},[194]={"c2","\194"},[195]={"c3","\195"},[196]={"c4","\196"},[197]={"c5","\197"},[198]={"c6","\198"},[199]={"c7","\199"},[200]={"c8","\200"},[201]={"c9","\201"},[202]={"ca","\202"},[203]={"cb","\203"},[204]={"cc","\204"},[205]={"cd","\205"},[206]={"ce","\206"},[207]={"cf","\207"},[208]={"d0","\208"},[209]={"d1","\209"},[210]={"d2","\210"},[211]={"d3","\211"},[212]={"d4","\212"},[213]={"d5","\213"},[214]={"d6","\214"},[215]={"d7","\215"},[216]={"d8","\216"},[217]={"d9","\217"},[218]={"da","\218"},[219]={"db","\219"},[220]={"dc","\220"},[221]={"dd","\221"},[222]={"de","\222"},[223]={"df","\223"},[224]={"e0","\224"},[225]={"e1","\225"},[226]={"e2","\226"},[227]={"e3","\227"},[228]={"e4","\228"},[229]={"e5","\229"},[230]={"e6","\230"},[231]={"e7","\231"},[232]={"e8","\232"},[233]={"e9","\233"},[234]={"ea","\234"},[235]={"eb","\235"},[236]={"ec","\236"},[237]={"ed","\237"},[238]={"ee","\238"},[239]={"ef","\239"},[240]={"f0","\240"},[241]={"f1","\241"},[242]={"f2","\242"},[243]={"f3","\243"},[244]={"f4","\244"},[245]={"f5","\245"},[246]={"f6","\246"},[247]={"f7","\247"},[248]={"f8","\248"},[249]={"f9","\249"},[250]={"fa","\250"},[251]={"fb","\251"},[252]={"fc","\252"},[253]={"fd","\253"},[254]={"fe","\254"},[255]={"ff","\255"}}local c,d,e,f,g=bit32.band,bit32.rrotate,bit32.bxor,bit32.rshift,bit32.bnot;local string,assert=string,assert;local h={0x428a2f98,0x71374491,0xb5c0fbcf,0xe9b5dba5,0x3956c25b,0x59f111f1,0x923f82a4,0xab1c5ed5,0xd807aa98,0x12835b01,0x243185be,0x550c7dc3,0x72be5d74,0x80deb1fe,0x9bdc06a7,0xc19bf174,0xe49b69c1,0xefbe4786,0x0fc19dc6,0x240ca1cc,0x2de92c6f,0x4a7484aa,0x5cb0a9dc,0x76f988da,0x983e5152,0xa831c66d,0xb00327c8,0xbf597fc7,0xc6e00bf3,0xd5a79147,0x06ca6351,0x14292967,0x27b70a85,0x2e1b2138,0x4d2c6dfc,0x53380d13,0x650a7354,0x766a0abb,0x81c2c92e,0x92722c85,0xa2bfe8a1,0xa81a664b,0xc24b8b70,0xc76c51a3,0xd192e819,0xd6990624,0xf40e3585,0x106aa070,0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2}local function i(j,k)local l=""local m=""for n=1,k do local o=j%256;l=b[o][2]..l;m=b[o][1]..m;j=(j-o)/256 end;return m,l end;local function p(q,n)local k=0;for n=n,n+3 do k=k*256+string.byte(q,n)end;return k end;local function r(s,t)local u=-(t+1+8)%64;_,t=i(8*t,8)tlen=""s=s.."\128"..string.rep("\0",u)..t;assert(#s%64==0)return s end;local function v(w)w[1]=0x6a09e667;w[2]=0xbb67ae85;w[3]=0x3c6ef372;w[4]=0xa54ff53a;w[5]=0x510e527f;w[6]=0x9b05688c;w[7]=0x1f83d9ab;w[8]=0x5be0cd19;return w end;local function x(s,n,w)local y={}for z=1,16 do y[z]=p(s,n+(z-1)*4)end;for z=17,64 do local A=y[z-15]local B=e(d(A,7),d(A,18),f(A,3))A=y[z-2]local l=e(d(A,17),d(A,19),f(A,10))y[z]=y[z-16]+B+y[z-7]+l end;local C,D,E,F,G,H,I,J=w[1],w[2],w[3],w[4],w[5],w[6],w[7],w[8]for n=1,64 do local B=e(d(C,2),d(C,13),d(C,22))local K=e(c(C,D),c(C,E),c(D,E))local L=B+K;local l=e(d(G,6),d(G,11),d(G,25))local M=e(c(G,H),c(g(G),I))local N=J+l+M+h[n]+y[n]J=I;I=H;H=G;G=F+N;F=E;E=D;D=C;C=N+L end;w[1]=c(w[1]+C)w[2]=c(w[2]+D)w[3]=c(w[3]+E)w[4]=c(w[4]+F)w[5]=c(w[5]+G)w[6]=c(w[6]+H)w[7]=c(w[7]+I)w[8]=c(w[8]+J)end;local function O(w)return i(w[1],4)..i(w[2],4)..i(w[3],4)..i(w[4],4)..i(w[5],4)..i(w[6],4)..i(w[7],4)..i(w[8],4)end;local P={}local function Q(s)s=r(s,#s)local w=v(P)for n=1,#s,64 do x(s,n,w)end;return O(w)end;return Q(a)end
				local EQ = function (a,b)
					if 1 == 1 then
						if type(a) == type(b) and type(b) == type(a) then
							if typeof(a) == typeof(b) then
								if a == b and b == a then
									if 1 == 2 then warn("EQ ERR") end
									return true
								else
									if 2 == 1 then warn("EQ ERR") end
									return false
								end
							else
								if 2 == 3 then warn("EQ ERR") end
								return false
							end
						else
							if 69 ~= 69 then warn("EQ ERR") end
							return false
						end
					else
						warn("EQ ERR")
					end
				end
				if EQ(BackupData, hash(rStr .. 'request' .. rStr .. 'table.foreach' .. rStr .. 'FindFirstChild' .. _G.Key)  .. hash(GAME)) then
					rStr = nil
					getgenv().PASSMOOD = "HOOK HOOK"
				end
			end)
			if err then
				warn(err)
			end
		end)

		repeat wait() until getgenv().PASSMOOD == "HOOK HOOK"
		getgenv().PASSMOOD = nil
	end

	-----------------

	------UiClick--------
	if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("RoactUI") then 
		if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("RoactUI"):FindFirstChild("ServerList") then 
			local Button = game:GetService("Players").LocalPlayer.PlayerGui.RoactUI.ServerList.BackdropFrame.Frame.CloseButton.Button.ButtonDetection
			local events = { "MouseButton1Click", "MouseButton1Down", "Activated" }
			for i, v in next, events do firesignal(Button[v]) end

		end
	end

	----------------

	----Bypass-----
	
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local StarterGui = game:GetService("StarterGui")
	local UserInputService = game:GetService("UserInputService")
	local mouse = Players.LocalPlayer:GetMouse()
	local nevermore_modules = rawget(require(game.ReplicatedStorage.Framework.Nevermore), "_lookupTable")
	local network = rawget(nevermore_modules, "Network") -- network is the place where the remote handling shit is
	local events_table = getupvalue(getsenv(network).GetFunctionHandler, 1)
	local remotes = {}

	LPH_NO_VIRTUALIZE(function()
		local old;
old = hookmetamethod(game,"__namecall",function(self,...)
local args = {...}
if self.Name == "LogKick" then 
return
end
return old(self, ...)
end)


		for _, Connection in next, getconnections(game:GetService("ScriptContext").Error) do
			Connection:Disable()
		end
		
		for _, Connection in next, getconnections(game:GetService("LogService").MessageOut) do
			Connection:Disable()
		end
		
		for _, Value in next, getgc(true) do
			if typeof(Value) == "table" and typeof(rawget(Value, "punish")) == "function" then
				Hook = hookfunction(Value.punish, function(Self, ...)
					local Arguments     = {...}
					Arguments[2]        = "FenrilHubOnTop"
					return Hook(Self, table.unpack(Arguments))
				end)
			end
		
			if type(Value) == "table" and rawget(Value, "Remote") then
				Value.Remote.Name = Value.Name
			end
		end

		local Players = game:GetService("Players")
		local Player = Players.LocalPlayer

		local OldNameCall 
		OldNameCall = hookmetamethod(game, "__namecall", function(...) 
			local Self, Args = (...), ({select(2, ...)})

			if getnamecallmethod() == "Kick" and Self == Player then 
				return
			end

			return OldNameCall(...)
		end)

		game:GetService("ScriptContext"):SetTimeout(0)

		setmetatable(remotes, {
			__call = function(table2, ...)
				local args = {...}

				table.foreach(args, print)

				table2[args[1]]:FireServer(args[2])
			end
		})

		do
			for i, v in pairs(remotes_table) do
				-- index is name, value is info table
				remotes[i] = rawget(v, "Remote")
			end
			for i, v in pairs(events_table) do
				-- index is name, value is info table
				remotes[i] = rawget(v, "Remote")
			end
		end


		for i,v in pairs(getgc(true)) do
			if type(v) == "table" and rawget(v,"Remote") then
				v.Remote.Name = v.Name
			end
		end

		for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("Jump"))) do
			v:Disable()
		end
		for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"))) do
			v:Disable()
		end
		for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("JumpPower"))) do
			v:Disable()
		end
		for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("HipHeight"))) do
			v:Disable()
		end
		-- 	local mt = getrawmetatable(game)
		-- 	setreadonly(mt,false)
		-- 	local old = mt.__index
		-- 	mt.__index = newcclosure(function(self,a)
		-- 		if a == "WalkSpeed" then 
		-- 			return 16
		-- 		end
		-- 		if a == "JumpPower" then 
		-- 			return 50
		-- 		end
		-- 		if a == "HipHeight" then 
		-- 			return 2
		-- 		end
		-- 		return old(self,a)
		-- 	end)

		for _, Connection in next, getconnections(game:GetService("ScriptContext").Error) do
			Connection:Disable()
		end

		for _, Connection in next, getconnections(game:GetService("LogService").MessageOut) do
			Connection:Disable()
		end
		local h = game.Players.LocalPlayer.Character.Humanoid
		local current_ws = 16
		for i,v in pairs(getconnections(h.Changed)) do v:Disable() end
		local mt = getrawmetatable(game)
		setreadonly(mt,false)
		local backup = mt.__index
		local backup2 = mt.__newindex
		mt.__index = newcclosure(function(tbl,idx)
			if checkcaller() then return backup(tbl,idx) end
			if tbl == h and idx == "WalkSpeed" then
				return current_ws
			end
			return backup(tbl,idx)
		end)
		mt.__newindex = newcclosure(function(tbl,idx,val)
			if checkcaller() then return backup2(tbl,idx,val) end
			if tbl == h and idx == "WalkSpeed" then
				current_ws = val
				return os.time()
			end
			return backup2(tbl,idx,val)
		end)
		setreadonly(mt,true)

		for i,v in pairs(getgc(true)) do
			if typeof(v) ~= 'table' then continue end
			if rawget(v, 'getIsBodyMoverCreatedByGame') then
				v.getIsBodyMoverCreatedByGame = function(gg)
					return true
				end

			end
			if typeof(v) == "table" and rawget(v, "kick") then
				v.kick =  function()
					return
				end
			end

			if typeof(v) == "table" and rawget(v, "randomDelayKick") then
				v.randomDelayKick = function()
					return wait(9e9)
				end
			end
			if rawget(v, 'connectCharacter') then
				v.connectCharacter = function(gg) return wait(9e9) end
			end


			if rawget(v, "punish") then
				local hf;hf=hookfunction(v.punish, function(...)
					return
				end)
			end
		end

		local modules = {}
		for i,v in pairs(rawget(require(game:GetService("ReplicatedStorage").Framework.Nevermore), "_lookupTable")) do
			modules[i] = require(v)
		end

		hookfunction(modules["AntiCheatHandlerClient"]._startModule, function(...)
			return
		end)


	end)()
	-----------------

	print("Fenril Hub Combat Warriors Loaded")

	if game.CoreGui:FindFirstChild("ScreenGui") then
		game.CoreGui:FindFirstChild("ScreenGui"):Destroy()
	end

	local InputService = game:GetService('UserInputService');
	local TextService = game:GetService('TextService');
	local TweenService = game:GetService('TweenService');
	local CoreGui = game:GetService('CoreGui');
	local RunService = game:GetService('RunService')
	local RenderStepped = RunService.RenderStepped;
	local LocalPlayer = game:GetService('Players').LocalPlayer;
	local Mouse = LocalPlayer:GetMouse();

	local ProtectGui = protectgui or (syn and syn.protect_gui) or (function() end);

	local ScreenGui = Instance.new('ScreenGui');
	ProtectGui(ScreenGui);

	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global;
	ScreenGui.Parent = CoreGui;
	ScreenGui.Name = "ScreenGui"

	local Toggles = {};
	local Options = {};

	local Library = {
		Registry = {};
		RegistryMap = {};

		HudRegistry = {};

		FontColor = Color3.fromRGB(255, 255, 255);
		MainColor = Color3.fromRGB(28, 28, 28);
		BackgroundColor = Color3.fromRGB(20, 20, 20);
		AccentColor = Color3.fromRGB(14, 222, 255);
		OutlineColor = Color3.fromRGB(50, 50, 50);


		Black = Color3.new(0, 0, 0);

		OpenedFrames = {};

		Signals = {};
		ScreenGui = ScreenGui;
	};

	local RainbowStep = 0
	local Hue = 0

	table.insert(Library.Signals, RenderStepped:Connect(function(Delta)
		RainbowStep = RainbowStep + Delta

		if RainbowStep >= (1 / 60) then
			RainbowStep = 0

			Hue = Hue + (1 / 400);

			if Hue > 1 then
				Hue = 0;
			end;

			Library.CurrentRainbowHue = Hue;
			Library.CurrentRainbowColor = Color3.fromHSV(Hue, 0.8, 1);
		end
	end))

	function Library:AttemptSave()
		if Library.SaveManager then
			Library.SaveManager:Save();
		end;
	end;

	function Library:Create(Class, Properties)
		local _Instance = Class;

		if type(Class) == 'string' then
			_Instance = Instance.new(Class);
		end;

		for Property, Value in next, Properties do
			_Instance[Property] = Value;
		end;

		return _Instance;
	end;

	function Library:CreateLabel(Properties, IsHud)
		local _Instance = Library:Create('TextLabel', {
			BackgroundTransparency = 1;
			Font = Enum.Font.Code;
			TextColor3 = Library.FontColor;
			TextSize = 16;
			TextStrokeTransparency = 0;
		});

		Library:AddToRegistry(_Instance, {
			TextColor3 = 'FontColor';
		}, IsHud);

		return Library:Create(_Instance, Properties);
	end;

	function Library:MakeDraggable(Instance, Cutoff)
		Instance.Active = true;

		Instance.InputBegan:Connect(function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 then
				local ObjPos = Vector2.new(
					Mouse.X - Instance.AbsolutePosition.X,
					Mouse.Y - Instance.AbsolutePosition.Y
				);

				if ObjPos.Y > (Cutoff or 40) then
					return;
				end;

				while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
					Instance.Position = UDim2.new(
						0,
						Mouse.X - ObjPos.X + (Instance.Size.X.Offset * Instance.AnchorPoint.X),
						0,
						Mouse.Y - ObjPos.Y + (Instance.Size.Y.Offset * Instance.AnchorPoint.Y)
					);

					RenderStepped:Wait();
				end;
			end;
		end)
	end;

	function Library:AddToolTip(InfoStr, HoverInstance)
		local X, Y = Library:GetTextBounds(InfoStr, Enum.Font.Code, 14);
		local Tooltip = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor,        
			BorderColor3 = Library.OutlineColor,

			Size = UDim2.fromOffset(X + 5, Y + 4),
			ZIndex = 11;
			Parent = Library.ScreenGui,

			Visible = false,
		})

		local Label = Library:CreateLabel({
			Position = UDim2.fromOffset(3, 1),
			Size = UDim2.fromOffset(X, Y);
			TextSize = 14;
			Text = InfoStr,
			TextColor3 = Library.FontColor,
			TextXAlignment = Enum.TextXAlignment.Left;
			ZIndex = 12;

			Parent = Tooltip;
		});

		Library:AddToRegistry(Tooltip, {
			BackgroundColor3 = 'MainColor';
			BorderColor3 = 'OutlineColor';
		});

		Library:AddToRegistry(Label, {
			TextColor3 = 'FontColor',
		});

		local IsHovering = false
		HoverInstance.MouseEnter:Connect(function()
			IsHovering = true

			Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
			Tooltip.Visible = true

			while IsHovering do
				RunService.Heartbeat:Wait()
				Tooltip.Position = UDim2.fromOffset(Mouse.X + 15, Mouse.Y + 12)
			end
		end)

		HoverInstance.MouseLeave:Connect(function()
			IsHovering = false
			Tooltip.Visible = false
		end)
	end

	function Library:OnHighlight(HighlightInstance, Instance, Properties, PropertiesDefault)
		HighlightInstance.MouseEnter:Connect(function()
			local Reg = Library.RegistryMap[Instance];

			for Property, ColorIdx in next, Properties do
				Instance[Property] = Library[ColorIdx] or ColorIdx;

				if Reg and Reg.Properties[Property] then
					Reg.Properties[Property] = ColorIdx;
				end;
			end;
		end)

		HighlightInstance.MouseLeave:Connect(function()
			local Reg = Library.RegistryMap[Instance];

			for Property, ColorIdx in next, PropertiesDefault do
				Instance[Property] = Library[ColorIdx] or ColorIdx;

				if Reg and Reg.Properties[Property] then
					Reg.Properties[Property] = ColorIdx;
				end;
			end;
		end)
	end;

	function Library:MouseIsOverOpenedFrame()
		for Frame, _ in next, Library.OpenedFrames do
			local AbsPos, AbsSize = Frame.AbsolutePosition, Frame.AbsoluteSize;

			if Mouse.X >= AbsPos.X and Mouse.X <= AbsPos.X + AbsSize.X
				and Mouse.Y >= AbsPos.Y and Mouse.Y <= AbsPos.Y + AbsSize.Y then

				return true;
			end;
		end;
	end;

	function Library:MapValue(Value, MinA, MaxA, MinB, MaxB)
		return (1 - ((Value - MinA) / (MaxA - MinA))) * MinB + ((Value - MinA) / (MaxA - MinA)) * MaxB;
	end;

	function Library:GetTextBounds(Text, Font, Size, Resolution)
		local Bounds = TextService:GetTextSize(Text, Size, Font, Resolution or Vector2.new(1920, 1080))
		return Bounds.X, Bounds.Y
	end;

	function Library:GetDarkerColor(Color)
		local H, S, V = Color3.toHSV(Color);
		return Color3.fromHSV(H, S, V / 1.5);
	end; 
	Library.AccentColorDark = Library:GetDarkerColor(Library.AccentColor);

	function Library:AddToRegistry(Instance, Properties, IsHud)
		local Idx = #Library.Registry + 1;
		local Data = {
			Instance = Instance;
			Properties = Properties;
			Idx = Idx;
		};

		table.insert(Library.Registry, Data);
		Library.RegistryMap[Instance] = Data;

		if IsHud then
			table.insert(Library.HudRegistry, Data);
		end;
	end;

	function Library:RemoveFromRegistry(Instance)
		local Data = Library.RegistryMap[Instance];

		if Data then
			for Idx = #Library.Registry, 1, -1 do
				if Library.Registry[Idx] == Data then
					table.remove(Library.Registry, Idx);
				end;
			end;

			for Idx = #Library.HudRegistry, 1, -1 do
				if Library.HudRegistry[Idx] == Data then
					table.remove(Library.HudRegistry, Idx);
				end;
			end;

			Library.RegistryMap[Instance] = nil;
		end;
	end;

	function Library:UpdateColorsUsingRegistry()
		-- TODO: Could have an 'active' list of objects
		-- where the active list only contains Visible objects.

		-- IMPL: Could setup .Changed events on the AddToRegistry function
		-- that listens for the 'Visible' propert being changed.
		-- Visible: true => Add to active list, and call UpdateColors function
		-- Visible: false => Remove from active list.

		-- The above would be especially efficient for a rainbow menu color or live color-changing.

		for Idx, Object in next, Library.Registry do
			for Property, ColorIdx in next, Object.Properties do
				if type(ColorIdx) == 'string' then
					Object.Instance[Property] = Library[ColorIdx];
				elseif type(ColorIdx) == 'function' then
					Object.Instance[Property] = ColorIdx()
				end
			end;
		end;
	end;

	function Library:GiveSignal(Signal)
		-- Only used for signals not attached to library instances, as those should be cleaned up on object destruction by Roblox
		table.insert(Library.Signals, Signal)
	end

	function Library:Unload()
		-- Unload all of the signals
		for Idx = #Library.Signals, 1, -1 do
			local Connection = table.remove(Library.Signals, Idx)
			Connection:Disconnect()
		end

		-- Call our unload callback, maybe to undo some hooks etc
		if Library.OnUnload then
			Library.OnUnload()
		end

		ScreenGui:Destroy()
	end

	function Library:OnUnload(Callback)
		Library.OnUnload = Callback
	end

	Library:GiveSignal(ScreenGui.DescendantRemoving:Connect(function(Instance)
		if Library.RegistryMap[Instance] then
			Library:RemoveFromRegistry(Instance);
		end;
	end))

	local BaseAddons = {};

	do
		local Funcs = {};

		function Funcs:AddColorPicker(Idx, Info)
			local ToggleLabel = self.TextLabel;
			local Container = self.Container;

			local ColorPicker = {
				Value = Info.Default;
				Type = 'ColorPicker';
				Title = type(Info.Title) == 'string' and Info.Title or 'Color picker',
			};

			function ColorPicker:SetHSVFromRGB(Color)
				local H, S, V = Color3.toHSV(Color);

				ColorPicker.Hue = H;
				ColorPicker.Sat = S;
				ColorPicker.Vib = V;
			end;

			ColorPicker:SetHSVFromRGB(ColorPicker.Value);

			local DisplayFrame = Library:Create('Frame', {
				BackgroundColor3 = ColorPicker.Value;
				BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(0, 28, 0, 14);
				ZIndex = 6;
				Parent = ToggleLabel;
			});

			local RelativeOffset = 0;

			for _, Element in next, Container:GetChildren() do
				if not Element:IsA('UIListLayout') then
					RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
				end;
			end;

			local PickerFrameOuter = Library:Create('Frame', {
				Name = 'Color';
				BackgroundColor3 = Color3.new(1, 1, 1);
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1);
				Size = UDim2.new(1, -13, 0, 253);
				Visible = false;
				ZIndex = 15;
				Parent = Container.Parent;
			});

			local PickerFrameInner = Library:Create('Frame', {
				BackgroundColor3 = Library.BackgroundColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 16;
				Parent = PickerFrameOuter;
			});

			local Highlight = Library:Create('Frame', {
				BackgroundColor3 = Library.AccentColor;
				BorderSizePixel = 0;
				Size = UDim2.new(1, 0, 0, 2);
				ZIndex = 17;
				Parent = PickerFrameInner;
			});

			local SatVibMapOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.new(0, 4, 0, 25);
				Size = UDim2.new(0, 200, 0, 200);
				ZIndex = 17;
				Parent = PickerFrameInner;
			});

			local SatVibMapInner = Library:Create('Frame', {
				BackgroundColor3 = Library.BackgroundColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 18;
				Parent = SatVibMapOuter;
			});

			local SatVibMap = Library:Create('ImageLabel', {
				BorderSizePixel = 0;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 18;
				Image = 'rbxassetid://4155801252';
				Parent = SatVibMapInner;
			});

			local HueSelectorOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.new(0, 208, 0, 25);
				Size = UDim2.new(0, 15, 0, 200);
				ZIndex = 17;
				Parent = PickerFrameInner;
			});

			local HueSelectorInner = Library:Create('Frame', {
				BackgroundColor3 = Color3.new(1, 1, 1);
				BorderSizePixel = 0;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 18;
				Parent = HueSelectorOuter;
			});

			local HueTextSize = Library:GetTextBounds('Hex color', Enum.Font.Code, 16) + 3
			local RgbTextSize = Library:GetTextBounds('255, 255, 255', Enum.Font.Code, 16) + 3

			local HueBoxOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.fromOffset(4, 228),
				Size = UDim2.new(0.5, -6, 0, 20),
				ZIndex = 18,
				Parent = PickerFrameInner;
			});

			local HueBoxInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 18,
				Parent = HueBoxOuter;
			});

			Library:Create('UIGradient', {
				Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
				});
				Rotation = 90;
				Parent = HueBoxInner;
			});

			local HueBox = Library:Create('TextBox', {
				BackgroundTransparency = 1;
				Position = UDim2.new(0, 5, 0, 0);
				Size = UDim2.new(1, -5, 1, 0);
				Font = Enum.Font.Code;
				PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
				PlaceholderText = 'Hex color',
				Text = '#FFFFFF',
				TextColor3 = Library.FontColor;
				TextSize = 14;
				TextStrokeTransparency = 0;
				TextXAlignment = Enum.TextXAlignment.Left;
				ZIndex = 20,
				Parent = HueBoxInner;
			});

			local RgbBoxBase = Library:Create(HueBoxOuter:Clone(), {
				Position = UDim2.new(0.5, 2, 0, 228),
				Size = UDim2.new(0.5, -6, 0, 20),
				Parent = PickerFrameInner
			})  

			local RgbBox = Library:Create(RgbBoxBase.Frame:FindFirstChild('TextBox'), {
				Text = '255, 255, 255',
				PlaceholderText = 'RGB color',
				TextColor3 = Library.FontColor,
			})

			local DisplayLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 14);
				Position = UDim2.fromOffset(5, 5);
				TextXAlignment = Enum.TextXAlignment.Left;
				TextSize = 14;
				Text = ColorPicker.Title,--Info.Default;
				TextWrapped = false;
				ZIndex = 16;
				Parent = PickerFrameInner;
			});


			Library:AddToRegistry(PickerFrameInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });
			Library:AddToRegistry(Highlight, { BackgroundColor3 = 'AccentColor'; });
			Library:AddToRegistry(SatVibMapInner, { BackgroundColor3 = 'BackgroundColor'; BorderColor3 = 'OutlineColor'; });

			Library:AddToRegistry(HueBoxInner, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
			Library:AddToRegistry(RgbBoxBase.Frame, { BackgroundColor3 = 'MainColor'; BorderColor3 = 'OutlineColor'; });
			Library:AddToRegistry(RgbBox, { TextColor3 = 'FontColor', });
			Library:AddToRegistry(HueBox, { TextColor3 = 'FontColor', });

			local SequenceTable = {};

			for Hue = 0, 1, 0.1 do
				table.insert(SequenceTable, ColorSequenceKeypoint.new(Hue, Color3.fromHSV(Hue, 1, 1)));
			end;

			local HueSelectorGradient = Library:Create('UIGradient', {
				Color = ColorSequence.new(SequenceTable);
				Rotation = 90;
				Parent = HueSelectorInner;
			});

			HueBox.FocusLost:Connect(function(enter)
				if enter then
					local success, result = pcall(Color3.fromHex, HueBox.Text)
					if success and typeof(result) == 'Color3' then
						ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(result)
					end
				end

				ColorPicker:Display()
			end)

			RgbBox.FocusLost:Connect(function(enter)
				if enter then
					local r, g, b = RgbBox.Text:match('(%d+),%s*(%d+),%s*(%d+)')
					if r and g and b then
						ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib = Color3.toHSV(Color3.fromRGB(r, g, b))
					end
				end

				ColorPicker:Display()
			end)

			function ColorPicker:Display()
				ColorPicker.Value = Color3.fromHSV(ColorPicker.Hue, ColorPicker.Sat, ColorPicker.Vib);
				SatVibMap.BackgroundColor3 = Color3.fromHSV(ColorPicker.Hue, 1, 1);

				Library:Create(DisplayFrame, {
					BackgroundColor3 = ColorPicker.Value;
					BorderColor3 = Library:GetDarkerColor(ColorPicker.Value);
				});

				HueBox.Text = '#' .. ColorPicker.Value:ToHex()
				RgbBox.Text = table.concat({ math.floor(ColorPicker.Value.R * 255), math.floor(ColorPicker.Value.G * 255), math.floor(ColorPicker.Value.B * 255) }, ', ')

				if ColorPicker.Changed then
					ColorPicker.Changed();
				end;
			end;

			function ColorPicker:OnChanged(Func)
				ColorPicker.Changed = Func;
				Func();
			end;

			function ColorPicker:Show()
				for Frame, Val in next, Library.OpenedFrames do
					if Frame.Name == 'Color' then
						Frame.Visible = false;
						Library.OpenedFrames[Frame] = nil;
					end;
				end;

				PickerFrameOuter.Visible = true;
				Library.OpenedFrames[PickerFrameOuter] = true;
			end;

			function ColorPicker:Hide()
				PickerFrameOuter.Visible = false;
				Library.OpenedFrames[PickerFrameOuter] = nil;
			end;

			function ColorPicker:SetValue(HSV)
				local Color = Color3.fromHSV(HSV[1], HSV[2], HSV[3]);

				ColorPicker:SetHSVFromRGB(Color);
				ColorPicker:Display();
			end;

			function ColorPicker:SetValueRGB(Color)
				ColorPicker:SetHSVFromRGB(Color);
				ColorPicker:Display();
			end;

			SatVibMap.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
						local MinX = SatVibMap.AbsolutePosition.X;
						local MaxX = MinX + SatVibMap.AbsoluteSize.X;
						local MouseX = math.clamp(Mouse.X, MinX, MaxX);

						local MinY = SatVibMap.AbsolutePosition.Y;
						local MaxY = MinY + SatVibMap.AbsoluteSize.Y;
						local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

						ColorPicker.Sat = (MouseX - MinX) / (MaxX - MinX);
						ColorPicker.Vib = 1 - ((MouseY - MinY) / (MaxY - MinY));
						ColorPicker:Display();

						RenderStepped:Wait();
					end;

					Library:AttemptSave();
				end;
			end);

			HueSelectorInner.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
						local MinY = HueSelectorInner.AbsolutePosition.Y;
						local MaxY = MinY + HueSelectorInner.AbsoluteSize.Y;
						local MouseY = math.clamp(Mouse.Y, MinY, MaxY);

						ColorPicker.Hue = ((MouseY - MinY) / (MaxY - MinY));
						ColorPicker:Display();

						RenderStepped:Wait();
					end;

					Library:AttemptSave();
				end;
			end);

			DisplayFrame.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					if PickerFrameOuter.Visible then
						ColorPicker:Hide();
					else
						ColorPicker:Show();
					end;
				end;
			end);

			Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					local AbsPos, AbsSize = PickerFrameOuter.AbsolutePosition, PickerFrameOuter.AbsoluteSize;

					if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
						or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

						ColorPicker:Hide();
					end;
				end;
			end))

			ColorPicker:Display();

			Options[Idx] = ColorPicker;

			return self;
		end;

		function Funcs:AddKeyPicker(Idx, Info)
			local ParentObj = self;
			local ToggleLabel = self.TextLabel;
			local Container = self.Container;

			local KeyPicker = {
				Value = Info.Default;
				Toggled = false;
				Mode = Info.Mode or 'Toggle'; -- Always, Toggle, Hold
				Type = 'KeyPicker';

				SyncToggleState = Info.SyncToggleState or false;
			};

			if KeyPicker.SyncToggleState then
				Info.Modes = { 'Toggle' }
				Info.Mode = 'Toggle'
			end

			local RelativeOffset = 0;

			for _, Element in next, Container:GetChildren() do
				if not Element:IsA('UIListLayout') then
					RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
				end;
			end;

			local PickOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(0, 28, 0, 15);
				ZIndex = 6;
				Parent = ToggleLabel;
			});

			local PickInner = Library:Create('Frame', {
				BackgroundColor3 = Library.BackgroundColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 7;
				Parent = PickOuter;
			});

			Library:AddToRegistry(PickInner, {
				BackgroundColor3 = 'BackgroundColor';
				BorderColor3 = 'OutlineColor';
			});

			local DisplayLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 1, 0);
				TextSize = 13;
				Text = Info.Default;
				TextWrapped = true;
				ZIndex = 8;
				Parent = PickInner;
			});

			local ModeSelectOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.new(1, 0, 0, RelativeOffset + 1);
				Size = UDim2.new(0, 60, 0, 45 + 2);
				Visible = false;
				ZIndex = 14;
				Parent = Container.Parent;
			});

			local ModeSelectInner = Library:Create('Frame', {
				BackgroundColor3 = Library.BackgroundColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 15;
				Parent = ModeSelectOuter;
			});

			Library:AddToRegistry(ModeSelectInner, {
				BackgroundColor3 = 'BackgroundColor';
				BorderColor3 = 'OutlineColor';
			});

			Library:Create('UIListLayout', {
				FillDirection = Enum.FillDirection.Vertical;
				SortOrder = Enum.SortOrder.LayoutOrder;
				Parent = ModeSelectInner;
			});

			local ContainerLabel = Library:CreateLabel({
				TextXAlignment = Enum.TextXAlignment.Left;
				Size = UDim2.new(1, 0, 0, 18);
				TextSize = 13;
				Visible = false;
				ZIndex = 110;
				Parent = Library.KeybindContainer;
			},  true);

			local Modes = Info.Modes or { 'Always', 'Toggle', 'Hold' };
			local ModeButtons = {};

			for Idx, Mode in next, Modes do
				local ModeButton = {};

				local Label = Library:CreateLabel({
					Size = UDim2.new(1, 0, 0, 15);
					TextSize = 13;
					Text = Mode;
					ZIndex = 16;
					Parent = ModeSelectInner;
				});

				function ModeButton:Select()
					for _, Button in next, ModeButtons do
						Button:Deselect();
					end;

					KeyPicker.Mode = Mode;

					Label.TextColor3 = Library.AccentColor;
					Library.RegistryMap[Label].Properties.TextColor3 = 'AccentColor';

					ModeSelectOuter.Visible = false;
				end;

				function ModeButton:Deselect()
					KeyPicker.Mode = nil;

					Label.TextColor3 = Library.FontColor;
					Library.RegistryMap[Label].Properties.TextColor3 = 'FontColor';
				end;

				Label.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						ModeButton:Select();
						Library:AttemptSave();
					end;
				end);

				if Mode == KeyPicker.Mode then
					ModeButton:Select();
				end;

				ModeButtons[Mode] = ModeButton;
			end;

			function KeyPicker:Update()
				if Info.NoUI then
					return;
				end;

				local State = KeyPicker:GetState();

				ContainerLabel.Text = string.format('[%s] %s (%s)', KeyPicker.Value, Info.Text, KeyPicker.Mode);

				ContainerLabel.Visible = true;
				ContainerLabel.TextColor3 = State and Library.AccentColor or Library.FontColor;

				Library.RegistryMap[ContainerLabel].Properties.TextColor3 = State and 'AccentColor' or 'FontColor';

				local YSize = 0
				local XSize = 0

				for _, Label in next, Library.KeybindContainer:GetChildren() do
					if Label:IsA('TextLabel') and Label.Visible then
						YSize = YSize + 18;
						if (Label.TextBounds.X > XSize) then
							XSize = Label.TextBounds.X 
						end 
					end;
				end;

				Library.KeybindFrame.Size = UDim2.new(0, math.max(XSize + 10, 210), 0, YSize + 23)
			end;

			function KeyPicker:GetState()
				if KeyPicker.Mode == 'Always' then
					return true;
				elseif KeyPicker.Mode == 'Hold' then
					local Key = KeyPicker.Value;

					if Key == 'MB1' or Key == 'MB2' then
						return Key == 'MB1' and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
							or Key == 'MB2' and InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2);
					else
						return InputService:IsKeyDown(Enum.KeyCode[KeyPicker.Value]);
					end;
				else
					return KeyPicker.Toggled;
				end;
			end;

			function KeyPicker:SetValue(Data)
				local Key, Mode = Data[1], Data[2];
				DisplayLabel.Text = Key;
				KeyPicker.Value = Key;
				ModeButtons[Mode]:Select();
				KeyPicker:Update();
			end;

			function KeyPicker:OnClick(Callback)
				KeyPicker.Clicked = Callback
			end


			if ParentObj.Addons then
				table.insert(ParentObj.Addons, KeyPicker)
			end

			function KeyPicker:DoClick()
				if ParentObj.Type == 'Toggle' and KeyPicker.SyncToggleState then
					ParentObj:SetValue(not ParentObj.Value)
				end

				if KeyPicker.Clicked then
					KeyPicker.Clicked()
				end
			end

			local Picking = false;

			PickOuter.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					Picking = true;

					DisplayLabel.Text = '';

					local Break;
					local Text = '';

					task.spawn(function()
						while (not Break) do
							if Text == '...' then
								Text = '';
							end;

							Text = Text .. '.';
							DisplayLabel.Text = Text;

							wait(0.4);
						end;
					end);

					wait(0.2);

					local Event;
					Event = InputService.InputBegan:Connect(function(Input)
						local Key;

						if Input.UserInputType == Enum.UserInputType.Keyboard then
							Key = Input.KeyCode.Name;
						elseif Input.UserInputType == Enum.UserInputType.MouseButton1 then
							Key = 'MB1';
						elseif Input.UserInputType == Enum.UserInputType.MouseButton2 then
							Key = 'MB2';
						end;

						Break = true;
						Picking = false;

						DisplayLabel.Text = Key;
						KeyPicker.Value = Key;

						Library:AttemptSave();

						Event:Disconnect();
					end);
				elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and not Library:MouseIsOverOpenedFrame() then
					ModeSelectOuter.Visible = true;
				end;
			end);

			Library:GiveSignal(InputService.InputBegan:Connect(function(Input)
				if (not Picking) then
					if KeyPicker.Mode == 'Toggle' then
						local Key = KeyPicker.Value;

						if Key == 'MB1' or Key == 'MB2' then
							if Key == 'MB1' and Input.UserInputType == Enum.UserInputType.MouseButton1
								or Key == 'MB2' and Input.UserInputType == Enum.UserInputType.MouseButton2 then
								KeyPicker.Toggled = not KeyPicker.Toggled
								KeyPicker:DoClick()
							end;
						elseif Input.UserInputType == Enum.UserInputType.Keyboard then
							if Input.KeyCode.Name == Key then
								KeyPicker.Toggled = not KeyPicker.Toggled;
								KeyPicker:DoClick()
							end;
						end;
					end;

					KeyPicker:Update();
				end;

				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					local AbsPos, AbsSize = ModeSelectOuter.AbsolutePosition, ModeSelectOuter.AbsoluteSize;

					if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
						or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

						ModeSelectOuter.Visible = false;
					end;
				end;
			end))

			Library:GiveSignal(InputService.InputEnded:Connect(function(Input)
				if (not Picking) then
					KeyPicker:Update();
				end;
			end))

			KeyPicker:Update();

			Options[Idx] = KeyPicker;

			return self;
		end;

		BaseAddons.__index = Funcs;
		BaseAddons.__namecall = function(Table, Key, ...)
			return Funcs[Key](...);
		end;
	end;

	local BaseGroupbox = {};

	do
		local Funcs = {};

		function Funcs:AddBlank(Size)
			local Groupbox = self;
			local Container = Groupbox.Container;

			Library:Create('Frame', {
				BackgroundTransparency = 1;
				Size = UDim2.new(1, 0, 0, Size);
				ZIndex = 1;
				Parent = Container;
			});
		end;

		function Funcs:AddLabel(Text, DoesWrap,Pos)
			local Label = {};

			local Groupbox = self;
			local Container = Groupbox.Container;
			local TextLabel = Library:CreateLabel({
				Size = UDim2.new(1, -4, 0, 15);
				TextSize = 14;
				Text = Text;
				TextWrapped = DoesWrap or false,
				RichText = true,
				ZIndex = 5;
				Parent = Container;
			});
			if Pos == "Center" then
				TextLabel.TextXAlignment = Enum.TextXAlignment.Center
			elseif Pos == "Right" then
				TextLabel.TextXAlignment = Enum.TextXAlignment.Right
			else
				TextLabel.TextXAlignment = Enum.TextXAlignment.Left
			end

			if DoesWrap then
				local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
				TextLabel.Size = UDim2.new(1, -4, 0, Y)
			else
				Library:Create('UIListLayout', {
					Padding = UDim.new(0, 4);
					FillDirection = Enum.FillDirection.Horizontal;
					HorizontalAlignment = Enum.HorizontalAlignment.Right;
					SortOrder = Enum.SortOrder.LayoutOrder;
					Parent = TextLabel;
				});
			end

			Label.TextLabel = TextLabel;
			Label.Container = Container;

			function Label:SetText(Text)
				TextLabel.Text = Text

				if DoesWrap then
					local Y = select(2, Library:GetTextBounds(Text, Enum.Font.Code, 14, Vector2.new(TextLabel.AbsoluteSize.X, math.huge)))
					TextLabel.Size = UDim2.new(1, -4, 0, Y)
				end

				Groupbox:Resize();
			end

			if (not DoesWrap) then
				setmetatable(Label, BaseAddons);
			end

			Groupbox:AddBlank(5);
			Groupbox:Resize();

			return Label;
		end;

		function Funcs:AddButton(Text, Func)
			local Button = {};

			local Groupbox = self;
			local Container = Groupbox.Container;

			local ButtonOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(1, -4, 0, 20);
				ZIndex = 5;
				Parent = Container;
			});

			Library:AddToRegistry(ButtonOuter, {
				BorderColor3 = 'Black';
			});

			local ButtonInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = ButtonOuter;
			});

			Library:AddToRegistry(ButtonInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			Library:Create('UIGradient', {
				Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
				});
				Rotation = 90;
				Parent = ButtonInner;
			});

			local ButtonLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 1, 0);
				TextSize = 14;
				Text = Text;
				ZIndex = 6;
				Parent = ButtonInner;
			});

			Library:OnHighlight(ButtonOuter, ButtonOuter,
				{ BorderColor3 = 'AccentColor' },
				{ BorderColor3 = 'Black' }
			);

			ButtonOuter.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					Func();
				end;
			end);

			function Button:AddTooltip(tip)
				if type(tip) == 'string' then
					Library:AddToolTip(tip, ButtonOuter)
				end
				return Button
			end

			function Button:AddButton(Text, Func)
				local SubButton = {}

				ButtonOuter.Size = UDim2.new(0.5, -2, 0, 20)

				local Outer = ButtonOuter:Clone()
				local Inner = Outer.Frame;
				local Label = Inner:FindFirstChildWhichIsA('TextLabel')

				Outer.Position = UDim2.new(1, 2, 0, 0)
				Outer.Size = UDim2.fromOffset(ButtonOuter.AbsoluteSize.X - 2, ButtonOuter.AbsoluteSize.Y)
				Outer.Parent = ButtonOuter

				Label.Text = Text;

				Library:AddToRegistry(Inner, {
					BackgroundColor3 = 'MainColor';
					BorderColor3 = 'OutlineColor';
				});

				Library:OnHighlight(Outer, Outer,
					{ BorderColor3 = 'AccentColor' },
					{ BorderColor3 = 'Black' }
				)

				Library:Create('UIGradient', {
					Color = ColorSequence.new({
						ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
						ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
					});

					Rotation = 90;
					Parent = Inner;
				});

				Outer.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
						Func();
					end;
				end);

				function SubButton:AddTooltip(tip)
					if type(tip) == 'string' then
						Library:AddToolTip(tip, Outer)
					end
					return SubButton
				end

				return SubButton
			end 

			Groupbox:AddBlank(5);
			Groupbox:Resize();

			return Button;
		end;

		function Funcs:AddDivider()
			local Groupbox = self;
			local Container = self.Container

			local Divider = {
				Type = 'Divider',
			}

			Groupbox:AddBlank(2);
			local DividerOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(1, -4, 0, 5);
				ZIndex = 5;
				Parent = Container;
			});

			local DividerInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = DividerOuter;
			});

			Library:AddToRegistry(DividerOuter, {
				BorderColor3 = 'Black';
			});

			Library:AddToRegistry(DividerInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			Groupbox:AddBlank(9);
			Groupbox:Resize();
		end

		function Funcs:AddInput(Idx, Info)
			local Textbox = {
				Value = Info.Default or '';
				Numeric = Info.Numeric or false;
				Finished = Info.Finished or false;
				Type = 'Input';
			};

			local Groupbox = self;
			local Container = Groupbox.Container;

			local InputLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 15);
				TextSize = 14;
				Text = Info.Text;
				TextXAlignment = Enum.TextXAlignment.Left;
				ZIndex = 5;
				Parent = Container;
			});

			Groupbox:AddBlank(1);

			local TextBoxOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(1, -4, 0, 20);
				ZIndex = 5;
				Parent = Container;
			});

			local TextBoxInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = TextBoxOuter;
			});

			Library:AddToRegistry(TextBoxInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			Library:OnHighlight(TextBoxOuter, TextBoxOuter,
				{ BorderColor3 = 'AccentColor' },
				{ BorderColor3 = 'Black' }
			);

			if type(Info.Tooltip) == 'string' then 
				Library:AddToolTip(Info.Tooltip, TextBoxOuter)
			end

			Library:Create('UIGradient', {
				Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
				});
				Rotation = 90;
				Parent = TextBoxInner;
			});

			local Container = Library:Create('Frame', {
				BackgroundTransparency = 1;
				ClipsDescendants = true;

				Position = UDim2.new(0, 5, 0, 0);
				Size = UDim2.new(1, -5, 1, 0);

				ZIndex = 7;
				Parent = TextBoxInner;
			})

			local Box = Library:Create('TextBox', {
				BackgroundTransparency = 1;

				Position = UDim2.fromOffset(0, 0),
				Size = UDim2.fromScale(5, 1),

				Font = Enum.Font.Code;
				PlaceholderColor3 = Color3.fromRGB(190, 190, 190);
				PlaceholderText = Info.Placeholder or '';

				Text = Info.Default or '';
				TextColor3 = Library.FontColor;
				TextSize = 14;
				TextStrokeTransparency = 0;
				TextXAlignment = Enum.TextXAlignment.Left;

				ZIndex = 7;
				Parent = Container;
			});

			function Textbox:SetValue(Text)
				if Info.MaxLength and #Text > Info.MaxLength then
					Text = Text:sub(1, Info.MaxLength);
				end;

				if Textbox.Numeric then
					if (not tonumber(Text)) and Text:len() > 0 then
						Text = Textbox.Value 
					end
				end

				Textbox.Value = Text;
				Box.Text = Text;

				if Textbox.Changed then
					Textbox.Changed();
				end;
			end;

			if Textbox.Finished then
				Box.FocusLost:Connect(function(enter)
					if not enter then return end

					Textbox:SetValue(Box.Text);
					Library:AttemptSave();
				end)
			else 
				Box:GetPropertyChangedSignal('Text'):Connect(function()
					Textbox:SetValue(Box.Text);
					Library:AttemptSave();
				end);
			end

			-- https://devforum.roblox.com/t/how-to-make-textboxes-follow-current-cursor-position/1368429/6
			-- thank you nicemike40 :)

			local function Update()
				local PADDING = 5
				local reveal = Container.AbsoluteSize.X

				if not Box:IsFocused() or Box.TextBounds.X <= reveal - 2 * PADDING then
					-- we aren't focused, or we fit so be normal
					Box.Position = UDim2.new(0, PADDING, 0, 0)
				else
					-- we are focused and don't fit, so adjust position
					local cursor = Box.CursorPosition
					if cursor ~= -1 then
						-- calculate pixel width of text from start to cursor
						local subtext = string.sub(Box.Text, 1, cursor-1)
						local width = TextService:GetTextSize(subtext, Box.TextSize, Box.Font, Vector2.new(math.huge, math.huge)).X

						-- check if we're inside the box with the cursor
						local currentCursorPos = Box.Position.X.Offset + width

						-- adjust if necessary
						if currentCursorPos < PADDING then
							Box.Position = UDim2.fromOffset(PADDING-width, 0)
						elseif currentCursorPos > reveal - PADDING - 1 then
							Box.Position = UDim2.fromOffset(reveal-width-PADDING-1, 0)
						end
					end
				end
			end 

			task.spawn(Update)

			Box:GetPropertyChangedSignal('Text'):Connect(Update)
			Box:GetPropertyChangedSignal('CursorPosition'):Connect(Update)
			Box.FocusLost:Connect(Update)
			Box.Focused:Connect(Update)

			Library:AddToRegistry(Box, {
				TextColor3 = 'FontColor';
			});

			function Textbox:OnChanged(Func)
				Textbox.Changed = Func;
				Func();
			end;

			Groupbox:AddBlank(5);
			Groupbox:Resize();

			Options[Idx] = Textbox;

			return Textbox;
		end;

		function Funcs:AddToggle(Idx, Info)
			local Toggle = {
				Value = Info.Default or false;
				Type = 'Toggle';

				Addons = {},
			};

			local Groupbox = self;
			local Container = Groupbox.Container;

			local ToggleOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(0, 13, 0, 13);
				ZIndex = 5;
				Parent = Container;
			});

			Library:AddToRegistry(ToggleOuter, {
				BorderColor3 = 'Black';
			});

			local ToggleInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = ToggleOuter;
			});

			Library:AddToRegistry(ToggleInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			local ToggleLabel = Library:CreateLabel({
				Size = UDim2.new(0, 216, 1, 0);
				Position = UDim2.new(1, 6, 0, 0);
				TextSize = 14;
				Text = Info.Text;
				TextXAlignment = Enum.TextXAlignment.Left;
				ZIndex = 6;
				Parent = ToggleInner;
			});

			Library:Create('UIListLayout', {
				Padding = UDim.new(0, 4);
				FillDirection = Enum.FillDirection.Horizontal;
				HorizontalAlignment = Enum.HorizontalAlignment.Right;
				SortOrder = Enum.SortOrder.LayoutOrder;
				Parent = ToggleLabel;
			});

			local ToggleRegion = Library:Create('Frame', {
				BackgroundTransparency = 1;
				Size = UDim2.new(0, 170, 1, 0);
				ZIndex = 8;
				Parent = ToggleOuter;
			});

			Library:OnHighlight(ToggleRegion, ToggleOuter,
				{ BorderColor3 = 'AccentColor' },
				{ BorderColor3 = 'Black' }
			);

			function Toggle:UpdateColors()
				Toggle:Display();
			end;

			if type(Info.Tooltip) == 'string' then
				Library:AddToolTip(Info.Tooltip, ToggleRegion)
			end

			function Toggle:Display()
				ToggleInner.BackgroundColor3 = Toggle.Value and Library.AccentColor or Library.MainColor;
				ToggleInner.BorderColor3 = Toggle.Value and Library.AccentColorDark or Library.OutlineColor;

				Library.RegistryMap[ToggleInner].Properties.BackgroundColor3 = Toggle.Value and 'AccentColor' or 'MainColor';
				Library.RegistryMap[ToggleInner].Properties.BorderColor3 = Toggle.Value and 'AccentColorDark' or 'OutlineColor';
			end;

			function Toggle:OnChanged(Func)
				Toggle.Changed = Func;
				Func();
			end;

			function Toggle:SetValue(Bool)
				Bool = (not not Bool);

				Toggle.Value = Bool;
				Toggle:Display();

				for _, Addon in next, Toggle.Addons do
					if Addon.Type == 'KeyPicker' and Addon.SyncToggleState then
						Addon.Toggled = Bool
						Addon:Update()
					end
				end

				if Toggle.Changed then
					Toggle.Changed();
				end;
			end;

			ToggleRegion.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					Toggle:SetValue(not Toggle.Value) -- Why was it not like this from the start?
					Library:AttemptSave();
				end;
			end);

			Toggle:Display();
			Groupbox:AddBlank(Info.BlankSize or 5 + 2);
			Groupbox:Resize();

			Toggle.TextLabel = ToggleLabel;
			Toggle.Container = Container;
			setmetatable(Toggle, BaseAddons);

			Toggles[Idx] = Toggle;

			return Toggle;
		end;

		function Funcs:AddSlider(Idx, Info)
			assert(Info.Default and Info.Text and Info.Min and Info.Max and Info.Rounding, 'Bad Slider Data');

			local Slider = {
				Value = Info.Default;
				Min = Info.Min;
				Max = Info.Max;
				Rounding = Info.Rounding;
				MaxSize = 232;
				Type = 'Slider';
			};

			local Groupbox = self;
			local Container = Groupbox.Container;

			if not Info.Compact then
				Library:CreateLabel({
					Size = UDim2.new(1, 0, 0, 10);
					TextSize = 14;
					Text = Info.Text;
					TextXAlignment = Enum.TextXAlignment.Left;
					TextYAlignment = Enum.TextYAlignment.Bottom;
					ZIndex = 5;
					Parent = Container;
				});

				Groupbox:AddBlank(3);
			end

			local SliderOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(1, -4, 0, 13);
				ZIndex = 5;
				Parent = Container;
			});

			Library:AddToRegistry(SliderOuter, {
				BorderColor3 = 'Black';
			});

			local SliderInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = SliderOuter;
			});

			Library:AddToRegistry(SliderInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			local Fill = Library:Create('Frame', {
				BackgroundColor3 = Library.AccentColor;
				BorderColor3 = Library.AccentColorDark;
				Size = UDim2.new(0, 0, 1, 0);
				ZIndex = 7;
				Parent = SliderInner;
			});

			Library:AddToRegistry(Fill, {
				BackgroundColor3 = 'AccentColor';
				BorderColor3 = 'AccentColorDark';
			});

			local HideBorderRight = Library:Create('Frame', {
				BackgroundColor3 = Library.AccentColor;
				BorderSizePixel = 0;
				Position = UDim2.new(1, 0, 0, 0);
				Size = UDim2.new(0, 1, 1, 0);
				ZIndex = 8;
				Parent = Fill;
			});

			Library:AddToRegistry(HideBorderRight, {
				BackgroundColor3 = 'AccentColor';
			});

			local DisplayLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 1, 0);
				TextSize = 14;
				Text = 'Infinite';
				ZIndex = 9;
				Parent = SliderInner;
			});

			Library:OnHighlight(SliderOuter, SliderOuter,
				{ BorderColor3 = 'AccentColor' },
				{ BorderColor3 = 'Black' }
			);

			if type(Info.Tooltip) == 'string' then
				Library:AddToolTip(Info.Tooltip, SliderOuter)
			end

			function Slider:UpdateColors()
				Fill.BackgroundColor3 = Library.AccentColor;
				Fill.BorderColor3 = Library.AccentColorDark;
			end;

			function Slider:Display()
				local Suffix = Info.Suffix or '';
				DisplayLabel.Text = string.format('%s/%s', Slider.Value .. Suffix, Slider.Max .. Suffix);

				local X = math.ceil(Library:MapValue(Slider.Value, Slider.Min, Slider.Max, 0, Slider.MaxSize));
				Fill.Size = UDim2.new(0, X, 1, 0);

				HideBorderRight.Visible = not (X == Slider.MaxSize or X == 0);
			end;

			function Slider:OnChanged(Func)
				Slider.Changed = Func;
				Func();
			end;

			local function Round(Value)
				if Slider.Rounding == 0 then
					return math.floor(Value);
				end;

				local Str = Value .. '';
				local Dot = Str:find('%.');

				return Dot and tonumber(Str:sub(1, Dot + Slider.Rounding)) or Value;
			end;

			function Slider:GetValueFromXOffset(X)
				return Round(Library:MapValue(X, 0, Slider.MaxSize, Slider.Min, Slider.Max));
			end;

			function Slider:SetValue(Str)
				local Num = tonumber(Str);

				if (not Num) then
					return;
				end;

				Num = math.clamp(Num, Slider.Min, Slider.Max);

				Slider.Value = Num;
				Slider:Display();

				if Slider.Changed then
					Slider.Changed();
				end;
			end;

			SliderInner.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					local mPos = Mouse.X;
					local gPos = Fill.Size.X.Offset;
					local Diff = mPos - (Fill.AbsolutePosition.X + gPos);

					while InputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
						local nMPos = Mouse.X;
						local nX = math.clamp(gPos + (nMPos - mPos) + Diff, 0, Slider.MaxSize);

						local nValue = Slider:GetValueFromXOffset(nX);
						local OldValue = Slider.Value;
						Slider.Value = nValue;

						Slider:Display();

						if nValue ~= OldValue and Slider.Changed then
							Slider.Changed();
						end;

						RenderStepped:Wait();
					end;

					Library:AttemptSave();
				end;
			end);

			Slider:Display();
			Groupbox:AddBlank(Info.BlankSize or 6);
			Groupbox:Resize();

			Options[Idx] = Slider;

			return Slider;
		end;

		function Funcs:AddDropdown(Idx, Info)
			assert(Info.Text and Info.Values, 'Bad Dropdown Data');

			local Dropdown = {
				Values = Info.Values;
				Value = Info.Multi and {};
				Multi = Info.Multi;
				Type = 'Dropdown';
			};

			local Groupbox = self;
			local Container = Groupbox.Container;

			local RelativeOffset = 0;

			local DropdownLabel = Library:CreateLabel({
				Size = UDim2.new(1, 0, 0, 10);
				TextSize = 14;
				Text = Info.Text;
				TextXAlignment = Enum.TextXAlignment.Left;
				TextYAlignment = Enum.TextYAlignment.Bottom;
				ZIndex = 5;
				Parent = Container;
			});

			Groupbox:AddBlank(3);

			for _, Element in next, Container:GetChildren() do
				if not Element:IsA('UIListLayout') then
					RelativeOffset = RelativeOffset + Element.Size.Y.Offset;
				end;
			end;

			local DropdownOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Size = UDim2.new(1, -4, 0, 20);
				ZIndex = 5;
				Parent = Container;
			});

			Library:AddToRegistry(DropdownOuter, {
				BorderColor3 = 'Black';
			});

			local DropdownInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 6;
				Parent = DropdownOuter;
			});

			Library:AddToRegistry(DropdownInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			Library:Create('UIGradient', {
				Color = ColorSequence.new({
					ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(212, 212, 212))
				});
				Rotation = 90;
				Parent = DropdownInner;
			});

			local DropdownArrow = Library:Create('ImageLabel', {
				AnchorPoint = Vector2.new(0, 0.5);
				BackgroundTransparency = 1;
				Position = UDim2.new(1, -16, 0.5, 0);
				Size = UDim2.new(0, 12, 0, 12);
				Image = 'http://www.roblox.com/asset/?id=6282522798';
				ZIndex = 7;
				Parent = DropdownInner;
			});

			local ItemList = Library:CreateLabel({
				Position = UDim2.new(0, 5, 0, 0);
				Size = UDim2.new(1, -5, 1, 0);
				TextSize = 14;
				Text = '--';
				TextXAlignment = Enum.TextXAlignment.Left;
				TextWrapped = true;
				ZIndex = 7;
				Parent = DropdownInner;
			});

			Library:OnHighlight(DropdownOuter, DropdownOuter,
				{ BorderColor3 = 'AccentColor' },
				{ BorderColor3 = 'Black' }
			);

			if type(Info.Tooltip) == 'string' then
				Library:AddToolTip(Info.Tooltip, DropdownOuter)
			end

			local MAX_DROPDOWN_ITEMS = 8;

			local ListOuter = Library:Create('Frame', {
				BorderColor3 = Color3.new(0, 0, 0);
				Position = UDim2.new(0, 4, 0, 20 + RelativeOffset + 1 + 20);
				Size = UDim2.new(1, -8, 0, MAX_DROPDOWN_ITEMS * 20 + 2);
				ZIndex = 20;
				Visible = false;
				Parent = Container.Parent;
			});

			local ListInner = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderColor3 = Library.OutlineColor;
				BorderMode = Enum.BorderMode.Inset;
				BorderSizePixel = 0;
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 21;
				Parent = ListOuter;
			});

			Library:AddToRegistry(ListInner, {
				BackgroundColor3 = 'MainColor';
				BorderColor3 = 'OutlineColor';
			});

			local Scrolling = Library:Create('ScrollingFrame', {
				BackgroundTransparency = 1;
				CanvasSize = UDim2.new(0, 0, 0, 0);
				Size = UDim2.new(1, 0, 1, 0);
				ZIndex = 21;
				Parent = ListInner;

				TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
				BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',

				ScrollBarThickness = 3,
				ScrollBarImageColor3 = Library.AccentColor, 
			});

			Library:AddToRegistry(Scrolling, {
				ScrollBarImageColor3 = 'AccentColor'
			})

			Library:Create('UIListLayout', {
				Padding = UDim.new(0, 0);
				FillDirection = Enum.FillDirection.Vertical;
				SortOrder = Enum.SortOrder.LayoutOrder;
				Parent = Scrolling;
			});

			function Dropdown:Display()
				local Values = Dropdown.Values;
				local Str = '';

				if Info.Multi then
					for Idx, Value in next, Values do
						if Dropdown.Value[Value] then
							Str = Str .. Value .. ', ';
						end;
					end;

					Str = Str:sub(1, #Str - 2);
				else
					Str = Dropdown.Value or '';
				end;

				ItemList.Text = (Str == '' and '--' or Str);
			end;

			function Dropdown:GetActiveValues()
				if Info.Multi then
					local T = {};

					for Value, Bool in next, Dropdown.Value do
						table.insert(T, Value);
					end;

					return T;
				else
					return Dropdown.Value and 1 or 0;
				end;
			end;

			function Dropdown:SetValues()
				local Values = Dropdown.Values;
				local Buttons = {};

				for _, Element in next, Scrolling:GetChildren() do
					if not Element:IsA('UIListLayout') then
						-- Library:RemoveFromRegistry(Element);
						Element:Destroy();
					end;
				end;

				local Count = 0;

				for Idx, Value in next, Values do
					local Table = {};

					Count = Count + 1;

					local Button = Library:Create('Frame', {
						BackgroundColor3 = Library.MainColor;
						BorderColor3 = Library.OutlineColor;
						BorderMode = Enum.BorderMode.Middle;
						Size = UDim2.new(1, -1, 0, 20);
						ZIndex = 23;
						Active = true,
						Parent = Scrolling;
					});

					Library:AddToRegistry(Button, {
						BackgroundColor3 = 'MainColor';
						BorderColor3 = 'OutlineColor';
					});

					local ButtonLabel = Library:CreateLabel({
						Size = UDim2.new(1, -6, 1, 0);
						Position = UDim2.new(0, 6, 0, 0);
						TextSize = 14;
						Text = Value;
						TextXAlignment = Enum.TextXAlignment.Left;
						ZIndex = 25;
						Parent = Button;
					});

					Library:OnHighlight(Button, Button,
						{ BorderColor3 = 'AccentColor', ZIndex = 24 },
						{ BorderColor3 = 'OutlineColor', ZIndex = 23 }
					);

					local Selected;

					if Info.Multi then
						Selected = Dropdown.Value[Value];
					else
						Selected = Dropdown.Value == Value;
					end;

					function Table:UpdateButton()
						if Info.Multi then
							Selected = Dropdown.Value[Value];
						else
							Selected = Dropdown.Value == Value;
						end;

						ButtonLabel.TextColor3 = Selected and Library.AccentColor or Library.FontColor;
						Library.RegistryMap[ButtonLabel].Properties.TextColor3 = Selected and 'AccentColor' or 'FontColor';
					end;

					ButtonLabel.InputBegan:Connect(function(Input)
						if Input.UserInputType == Enum.UserInputType.MouseButton1 then
							local Try = not Selected;

							if Dropdown:GetActiveValues() == 1 and (not Try) and (not Info.AllowNull) then
							else
								if Info.Multi then
									Selected = Try;

									if Selected then
										Dropdown.Value[Value] = true;
									else
										Dropdown.Value[Value] = nil;
									end;
								else
									Selected = Try;

									if Selected then
										Dropdown.Value = Value;
									else
										Dropdown.Value = nil;
									end;

									for _, OtherButton in next, Buttons do
										OtherButton:UpdateButton();
									end;
								end;

								Table:UpdateButton();
								Dropdown:Display();

								if Dropdown.Changed then
									Dropdown.Changed();
								end;

								Library:AttemptSave();
							end;
						end;
					end);

					Table:UpdateButton();
					Dropdown:Display();

					Buttons[Button] = Table;
				end;

				local Y = math.clamp(Count * 20, 0, MAX_DROPDOWN_ITEMS * 20) + 1;
				ListOuter.Size = UDim2.new(1, -8, 0, Y);
				Scrolling.CanvasSize = UDim2.new(0, 0, 0, (Count * 20) + 1);

				-- ListOuter.Size = UDim2.new(1, -8, 0, (#Values * 20) + 2);
			end;

			function Dropdown:OpenDropdown()
				ListOuter.Visible = true;
				Library.OpenedFrames[ListOuter] = true;
				DropdownArrow.Rotation = 180;
			end;

			function Dropdown:CloseDropdown()
				ListOuter.Visible = false;
				Library.OpenedFrames[ListOuter] = nil;
				DropdownArrow.Rotation = 0;
			end;

			function Dropdown:OnChanged(Func)
				Dropdown.Changed = Func;
				Func();
			end;

			function Dropdown:SetValue(Val)
				if Dropdown.Multi then
					local nTable = {};

					for Value, Bool in next, Val do
						if table.find(Dropdown.Values, Value) then
							nTable[Value] = true
						end;
					end;

					Dropdown.Value = nTable;
				else
					if (not Val) then
						Dropdown.Value = nil;
					elseif table.find(Dropdown.Values, Val) then
						Dropdown.Value = Val;
					end;
				end;

				Dropdown:SetValues();
				Dropdown:Display();

				if Dropdown.Changed then Dropdown.Changed() end
			end;

			DropdownOuter.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
					if ListOuter.Visible then
						Dropdown:CloseDropdown();
					else
						Dropdown:OpenDropdown();
					end;
				end;
			end);

			InputService.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					local AbsPos, AbsSize = ListOuter.AbsolutePosition, ListOuter.AbsoluteSize;

					if Mouse.X < AbsPos.X or Mouse.X > AbsPos.X + AbsSize.X
						or Mouse.Y < (AbsPos.Y - 20 - 1) or Mouse.Y > AbsPos.Y + AbsSize.Y then

						Dropdown:CloseDropdown();
					end;
				end;
			end);

			Dropdown:SetValues();
			Dropdown:Display();

			if type(Info.Default) == 'string' then
				Info.Default = table.find(Dropdown.Values, Info.Default)
			end

			if Info.Default then
				if Info.Multi then
					Dropdown.Value[Dropdown.Values[Info.Default]] = true;
				else
					Dropdown.Value = Dropdown.Values[Info.Default];
				end;

				Dropdown:SetValues();
				Dropdown:Display();
			end;

			Groupbox:AddBlank(Info.BlankSize or 5);
			Groupbox:Resize();

			Options[Idx] = Dropdown;

			return Dropdown;
		end;

		BaseGroupbox.__index = Funcs;
		BaseGroupbox.__namecall = function(Table, Key, ...)
			return Funcs[Key](...);
		end;
	end;

	-- < Create other UI elements >
	do
		Library.NotificationArea = Library:Create('Frame', {
			BackgroundTransparency = 1;
			Position = UDim2.new(0, 0, 0, 40);
			Size = UDim2.new(0, 300, 0, 200);
			ZIndex = 100;
			Parent = ScreenGui;
		});

		Library:Create('UIListLayout', {
			Padding = UDim.new(0, 4);
			FillDirection = Enum.FillDirection.Vertical;
			SortOrder = Enum.SortOrder.LayoutOrder;
			Parent = Library.NotificationArea;
		});

		local WatermarkOuter = Library:Create('Frame', {
			BorderColor3 = Color3.new(0, 0, 0);
			Position = UDim2.new(0, 255, 0, -28);
			Size = UDim2.new(0, 213, 0, 20);
			ZIndex = 200;
			Visible = false;
			Parent = ScreenGui;
		});

		local WatermarkInner = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor;
			BorderColor3 = Library.AccentColor;
			BorderMode = Enum.BorderMode.Inset;
			Size = UDim2.new(1, 0, 1, 0);
			ZIndex = 201;
			Parent = WatermarkOuter;
		});

		Library:AddToRegistry(WatermarkInner, {
			BorderColor3 = 'AccentColor';
		});

		local InnerFrame = Library:Create('Frame', {
			BackgroundColor3 = Color3.new(1, 1, 1);
			BorderSizePixel = 0;
			Position = UDim2.new(0, 1, 0, 1);
			Size = UDim2.new(1, -2, 1, -2);
			ZIndex = 202;
			Parent = WatermarkInner;
		});

		local Gradient = Library:Create('UIGradient', {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
				ColorSequenceKeypoint.new(1, Library.MainColor),
			});
			Rotation = -90;
			Parent = InnerFrame;
		});

		Library:AddToRegistry(Gradient, {
			Color = function()
				return ColorSequence.new({
					ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
					ColorSequenceKeypoint.new(1, Library.MainColor),
				});
			end
		});

		local WatermarkLabel = Library:CreateLabel({
			Position = UDim2.new(0, 5, 0, 0);
			Size = UDim2.new(1, -4, 1, 0);
			TextSize = 14;
			TextXAlignment = Enum.TextXAlignment.Left;
			ZIndex = 203;
			Parent = InnerFrame;
		});

		Library.Watermark = WatermarkOuter;
		Library.WatermarkText = WatermarkLabel;
		Library:MakeDraggable(Library.Watermark);



		local KeybindOuter = Library:Create('Frame', {
			AnchorPoint = Vector2.new(0, 0.5);
			BorderColor3 = Color3.new(0, 0, 0);
			Position = UDim2.new(0, 10, 0.5, 0);
			Size = UDim2.new(0, 210, 0, 20);
			Visible = false;
			ZIndex = 100;
			Parent = ScreenGui;
		});

		local KeybindInner = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor;
			BorderColor3 = Library.OutlineColor;
			BorderMode = Enum.BorderMode.Inset;
			Size = UDim2.new(1, 0, 1, 0);
			ZIndex = 101;
			Parent = KeybindOuter;
		});

		Library:AddToRegistry(KeybindInner, {
			BackgroundColor3 = 'MainColor';
			BorderColor3 = 'OutlineColor';
		}, true);

		local ColorFrame = Library:Create('Frame', {
			BackgroundColor3 = Library.AccentColor;
			BorderSizePixel = 0;
			Size = UDim2.new(1, 0, 0, 2);
			ZIndex = 102;
			Parent = KeybindInner;
		});

		Library:AddToRegistry(ColorFrame, {
			BackgroundColor3 = 'AccentColor';
		}, true);

		local KeybindLabel = Library:CreateLabel({
			Size = UDim2.new(1, 0, 0, 20);
			Position = UDim2.fromOffset(5, 2),
			TextXAlignment = Enum.TextXAlignment.Left,

			Text = 'Keybinds';
			ZIndex = 104;
			Parent = KeybindInner;
		});

		local KeybindContainer = Library:Create('Frame', {
			BackgroundTransparency = 1;
			Size = UDim2.new(1, 0, 1, -20);
			Position = UDim2.new(0, 0, 0, 20);
			ZIndex = 1;
			Parent = KeybindInner;
		});

		Library:Create('UIListLayout', {
			FillDirection = Enum.FillDirection.Vertical;
			SortOrder = Enum.SortOrder.LayoutOrder;
			Parent = KeybindContainer;
		});

		Library:Create('UIPadding', {
			PaddingLeft = UDim.new(0, 5),
			Parent = KeybindContainer,
		})

		Library.KeybindFrame = KeybindOuter;
		Library.KeybindContainer = KeybindContainer;
		Library:MakeDraggable(KeybindOuter);
	end;

	function Library:SetWatermarkVisibility(Bool)
		Library.Watermark.Visible = Bool;
	end;

	function Library:SetWatermark(Text)
		local X, Y = Library:GetTextBounds(Text, Enum.Font.Code, 14);
		Library.Watermark.Size = UDim2.new(0, X + 15, 0, (Y * 1.5) + 3);
		Library:SetWatermarkVisibility(true)

		Library.WatermarkText.Text = Text;
	end;

	function Library:Notify(Text, Time)
		local XSize, YSize = Library:GetTextBounds(Text, Enum.Font.Code, 14);

		YSize = YSize + 7

		local NotifyOuter = Library:Create('Frame', {
			BorderColor3 = Color3.new(0, 0, 0);
			Position = UDim2.new(0, 100, 0, 10);
			Size = UDim2.new(0, 0, 0, YSize);
			ClipsDescendants = true;
			ZIndex = 100;
			Parent = Library.NotificationArea;
		});

		local NotifyInner = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor;
			BorderColor3 = Library.OutlineColor;
			BorderMode = Enum.BorderMode.Inset;
			Size = UDim2.new(1, 0, 1, 0);
			ZIndex = 101;
			Parent = NotifyOuter;
		});

		Library:AddToRegistry(NotifyInner, {
			BackgroundColor3 = 'MainColor';
			BorderColor3 = 'OutlineColor';
		}, true);

		local InnerFrame = Library:Create('Frame', {
			BackgroundColor3 = Color3.new(1, 1, 1);
			BorderSizePixel = 0;
			Position = UDim2.new(0, 1, 0, 1);
			Size = UDim2.new(1, -2, 1, -2);
			ZIndex = 102;
			Parent = NotifyInner;
		});

		local Gradient = Library:Create('UIGradient', {
			Color = ColorSequence.new({
				ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
				ColorSequenceKeypoint.new(1, Library.MainColor),
			});
			Rotation = -90;
			Parent = InnerFrame;
		});

		Library:AddToRegistry(Gradient, {
			Color = function()
				return ColorSequence.new({
					ColorSequenceKeypoint.new(0, Library:GetDarkerColor(Library.MainColor)),
					ColorSequenceKeypoint.new(1, Library.MainColor),
				});
			end
		});

		local NotifyLabel = Library:CreateLabel({
			Position = UDim2.new(0, 4, 0, 0);
			Size = UDim2.new(1, -4, 1, 0);
			Text = Text;
			TextXAlignment = Enum.TextXAlignment.Left;
			TextSize = 14;
			ZIndex = 103;
			Parent = InnerFrame;
		});

		local LeftColor = Library:Create('Frame', {
			BackgroundColor3 = Library.AccentColor;
			BorderSizePixel = 0;
			Position = UDim2.new(0, -1, 0, -1);
			Size = UDim2.new(0, 3, 1, 2);
			ZIndex = 104;
			Parent = NotifyOuter;
		});

		Library:AddToRegistry(LeftColor, {
			BackgroundColor3 = 'AccentColor';
		}, true);

		pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, XSize + 8 + 4, 0, YSize), 'Out', 'Quad', 0.4, true);

		task.spawn(function()
			wait(Time or 5);

			pcall(NotifyOuter.TweenSize, NotifyOuter, UDim2.new(0, 0, 0, YSize), 'Out', 'Quad', 0.4, true);

			wait(0.4);

			NotifyOuter:Destroy();
		end);
	end;

	function Library:CreateWindow(...)
		local Arguments = { ... }
		local Config = { AnchorPoint = Vector2.zero }

		if type(...) == 'table' then
			Config = ...;
		else
			Config.Title = Arguments[1]
			Config.AutoShow = Arguments[2] or false;
		end

		if type(Config.Title) ~= 'string' then Config.Title = 'No title' end

		if typeof(Config.Position) ~= 'UDim2' then Config.Position = UDim2.fromOffset(175, 50) end
		if typeof(Config.Size) ~= 'UDim2' then Config.Size = UDim2.fromOffset(550, 600) end

		if Config.Center then
			Config.AnchorPoint = Vector2.new(0.5, 0.5)
			Config.Position = UDim2.fromScale(0.5, 0.5)
		end

		local Window = {
			Tabs = {};
		};

		local Outer = Library:Create('Frame', {
			AnchorPoint = Config.AnchorPoint,
			BackgroundColor3 = Color3.new(0, 0, 0);
			BorderSizePixel = 0;
			Position = Config.Position,
			Size = Config.Size,
			Visible = false;
			ZIndex = 1;
			Parent = ScreenGui;
		});

		Library:MakeDraggable(Outer, 25);

		local Inner = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor;
			BorderColor3 = Library.AccentColor;
			BorderMode = Enum.BorderMode.Inset;
			Position = UDim2.new(0, 1, 0, 1);
			Size = UDim2.new(1, -2, 1, -2);
			ZIndex = 1;
			Parent = Outer;
		});

		Library:AddToRegistry(Inner, {
			BackgroundColor3 = 'MainColor';
			BorderColor3 = 'AccentColor';
		});

		local WindowLabel = Library:CreateLabel({
			Position = UDim2.new(0, 7, 0, 0);
			Size = UDim2.new(0, 0, 0, 25);
			Text = Config.Title or '';
			TextXAlignment = Enum.TextXAlignment.Left;
			ZIndex = 1;
			Parent = Inner;
		});

		local MainSectionOuter = Library:Create('Frame', {
			BackgroundColor3 = Library.BackgroundColor;
			BorderColor3 = Library.OutlineColor;
			Position = UDim2.new(0, 8, 0, 25);
			Size = UDim2.new(1, -16, 1, -33);
			ZIndex = 1;
			Parent = Inner;
		});

		Library:AddToRegistry(MainSectionOuter, {
			BackgroundColor3 = 'BackgroundColor';
			BorderColor3 = 'OutlineColor';
		});

		local MainSectionInner = Library:Create('Frame', {
			BackgroundColor3 = Library.BackgroundColor;
			BorderColor3 = Color3.new(0, 0, 0);
			BorderMode = Enum.BorderMode.Inset;
			Position = UDim2.new(0, 0, 0, 0);
			Size = UDim2.new(1, 0, 1, 0);
			ZIndex = 1;
			Parent = MainSectionOuter;
		});

		Library:AddToRegistry(MainSectionInner, {
			BackgroundColor3 = 'BackgroundColor';
		});

		local TabArea = Library:Create('Frame', {
			BackgroundTransparency = 1;
			Position = UDim2.new(0, 8, 0, 8);
			Size = UDim2.new(1, -16, 0, 21);
			ZIndex = 1;
			Parent = MainSectionInner;
		});

		Library:Create('UIListLayout', {
			Padding = UDim.new(0, 0);
			FillDirection = Enum.FillDirection.Horizontal;
			SortOrder = Enum.SortOrder.LayoutOrder;
			Parent = TabArea;
		});

		local TabContainer = Library:Create('Frame', {
			BackgroundColor3 = Library.MainColor;
			BorderColor3 = Library.OutlineColor;
			Position = UDim2.new(0, 8, 0, 30);
			Size = UDim2.new(1, -16, 1, -38);
			ZIndex = 2;
			Parent = MainSectionInner;
		});

		Library:AddToRegistry(TabContainer, {
			BackgroundColor3 = 'MainColor';
			BorderColor3 = 'OutlineColor';
		});

		function Window:SetWindowTitle(Title)
			WindowLabel.Text = Title;
		end;

		function Window:AddTab(Name)
			local Tab = {
				Groupboxes = {};
				Tabboxes = {};
			};

			local TabButtonWidth = Library:GetTextBounds(Name, Enum.Font.Code, 16);

			local TabButton = Library:Create('Frame', {
				BackgroundColor3 = Library.BackgroundColor;
				BorderColor3 = Library.OutlineColor;
				Size = UDim2.new(0, TabButtonWidth + 8 + 4, 1, 0);
				ZIndex = 1;
				Parent = TabArea;
			});

			Library:AddToRegistry(TabButton, {
				BackgroundColor3 = 'BackgroundColor';
				BorderColor3 = 'OutlineColor';
			});

			local TabButtonLabel = Library:CreateLabel({
				Position = UDim2.new(0, 0, 0, 0);
				Size = UDim2.new(1, 0, 1, -1);
				Text = Name;
				ZIndex = 1;
				Parent = TabButton;
			});

			local Blocker = Library:Create('Frame', {
				BackgroundColor3 = Library.MainColor;
				BorderSizePixel = 0;
				Position = UDim2.new(0, 0, 1, 0);
				Size = UDim2.new(1, 0, 0, 1);
				BackgroundTransparency = 1;
				ZIndex = 3;
				Parent = TabButton;
			});

			Library:AddToRegistry(Blocker, {
				BackgroundColor3 = 'MainColor';
			});

			local TabFrame = Library:Create('Frame', {
				BackgroundTransparency = 1;
				Position = UDim2.new(0, 0, 0, 0);
				Size = UDim2.new(1, 0, 1, 0);
				Visible = false;
				ZIndex = 2;
				Parent = TabContainer;
			});

			local LeftSide = Library:Create('Frame', {
				BackgroundTransparency = 1;
				Position = UDim2.new(0, 8, 0, 8);
				Size = UDim2.new(0.5, -12, 0, 507);
				ZIndex = 2;
				Parent = TabFrame;
			});

			local RightSide = Library:Create('Frame', {
				BackgroundTransparency = 1;
				Position = UDim2.new(0.5, 4, 0, 8);
				Size = UDim2.new(0.5, -12, 0, 507);
				ZIndex = 2;
				Parent = TabFrame;
			});

			Library:Create('UIListLayout', {
				Padding = UDim.new(0, 8);
				FillDirection = Enum.FillDirection.Vertical;
				SortOrder = Enum.SortOrder.LayoutOrder;
				Parent = LeftSide;
			});

			Library:Create('UIListLayout', {
				Padding = UDim.new(0, 8);
				FillDirection = Enum.FillDirection.Vertical;
				SortOrder = Enum.SortOrder.LayoutOrder;
				Parent = RightSide;
			});

			function Tab:ShowTab()
				for _, Tab in next, Window.Tabs do
					Tab:HideTab();
				end;

				Blocker.BackgroundTransparency = 0;
				TabButton.BackgroundColor3 = Library.MainColor;
				Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'MainColor';
				TabFrame.Visible = true;
			end;

			function Tab:HideTab()
				Blocker.BackgroundTransparency = 1;
				TabButton.BackgroundColor3 = Library.BackgroundColor;
				Library.RegistryMap[TabButton].Properties.BackgroundColor3 = 'BackgroundColor';
				TabFrame.Visible = false;
			end;

			function Tab:AddGroupbox(Info)
				local Groupbox = {};

				local BoxOuter = Library:Create('Frame', {
					BackgroundColor3 = Library.BackgroundColor;
					BorderColor3 = Library.OutlineColor;
					Size = UDim2.new(1, 0, 0, 507);
					ZIndex = 2;
					Parent = Info.Side == 1 and LeftSide or RightSide;
				});

				Library:AddToRegistry(BoxOuter, {
					BackgroundColor3 = 'BackgroundColor';
					BorderColor3 = 'OutlineColor';
				});

				local BoxInner = Library:Create('Frame', {
					BackgroundColor3 = Library.BackgroundColor;
					BorderColor3 = Color3.new(0, 0, 0);
					BorderMode = Enum.BorderMode.Inset;
					Size = UDim2.new(1, 0, 1, 0);
					ZIndex = 4;
					Parent = BoxOuter;
				});

				Library:AddToRegistry(BoxInner, {
					BackgroundColor3 = 'BackgroundColor';
				});

				local Highlight = Library:Create('Frame', {
					BackgroundColor3 = Library.AccentColor;
					BorderSizePixel = 0;
					Size = UDim2.new(1, 0, 0, 2);
					ZIndex = 5;
					Parent = BoxInner;
				});

				Library:AddToRegistry(Highlight, {
					BackgroundColor3 = 'AccentColor';
				});

				local GroupboxLabel = Library:CreateLabel({
					Size = UDim2.new(1, 0, 0, 18);
					Position = UDim2.new(0, 4, 0, 2);
					TextSize = 14;
					Text = Info.Name;
					TextXAlignment = Enum.TextXAlignment.Center;
					ZIndex = 5;
					Parent = BoxInner;
				});

				local Container = Library:Create('Frame', {
					BackgroundTransparency = 1;
					Position = UDim2.new(0, 4, 0, 20);
					Size = UDim2.new(1, -4, 1, -20);
					ZIndex = 1;
					Parent = BoxInner;
				});

				Library:Create('UIListLayout', {
					FillDirection = Enum.FillDirection.Vertical;
					SortOrder = Enum.SortOrder.LayoutOrder;
					Parent = Container;
				});

				function Groupbox:Resize()
					local Size = 0;

					for _, Element in next, Groupbox.Container:GetChildren() do
						if not Element:IsA('UIListLayout') then
							Size = Size + Element.Size.Y.Offset;
						end;
					end;

					BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
				end;

				Groupbox.Container = Container;
				setmetatable(Groupbox, BaseGroupbox);

				Groupbox:AddBlank(3);
				Groupbox:Resize();

				Tab.Groupboxes[Info.Name] = Groupbox;

				return Groupbox;
			end;

			function Tab:AddLeftGroupbox(Name)
				return Tab:AddGroupbox({ Side = 1; Name = Name; });
			end;

			function Tab:AddRightGroupbox(Name)
				return Tab:AddGroupbox({ Side = 2; Name = Name; });
			end;

			function Tab:AddTabbox(Info)
				local Tabbox = {
					Tabs = {};
				};

				local BoxOuter = Library:Create('Frame', {
					BackgroundColor3 = Library.BackgroundColor;
					BorderColor3 = Library.OutlineColor;
					Size = UDim2.new(1, 0, 0, 0);
					ZIndex = 2;
					Parent = Info.Side == 1 and LeftSide or RightSide;
				});

				Library:AddToRegistry(BoxOuter, {
					BackgroundColor3 = 'BackgroundColor';
					BorderColor3 = 'OutlineColor';
				});

				local BoxInner = Library:Create('Frame', {
					BackgroundColor3 = Library.BackgroundColor;
					BorderColor3 = Color3.new(0, 0, 0);
					BorderMode = Enum.BorderMode.Inset;
					Size = UDim2.new(1, 0, 1, 0);
					ZIndex = 4;
					Parent = BoxOuter;
				});

				Library:AddToRegistry(BoxInner, {
					BackgroundColor3 = 'BackgroundColor';
				});

				local Highlight = Library:Create('Frame', {
					BackgroundColor3 = Library.AccentColor;
					BorderSizePixel = 0;
					Size = UDim2.new(1, 0, 0, 2);
					ZIndex = 10;
					Parent = BoxInner;
				});

				Library:AddToRegistry(Highlight, {
					BackgroundColor3 = 'AccentColor';
				});

				local TabboxButtons = Library:Create('Frame', {
					BackgroundTransparency = 1;
					Position = UDim2.new(0, 0, 0, 1);
					Size = UDim2.new(1, 0, 0, 18);
					ZIndex = 5;
					Parent = BoxInner;
				});

				Library:Create('UIListLayout', {
					FillDirection = Enum.FillDirection.Horizontal;
					HorizontalAlignment = Enum.HorizontalAlignment.Left;
					SortOrder = Enum.SortOrder.LayoutOrder;
					Parent = TabboxButtons;
				});

				function Tabbox:AddTab(Name)
					local Tab = {};

					local Button = Library:Create('Frame', {
						BackgroundColor3 = Library.MainColor;
						BorderColor3 = Color3.new(0, 0, 0);
						Size = UDim2.new(0.5, 0, 1, 0);
						ZIndex = 6;
						Parent = TabboxButtons;
					});

					Library:AddToRegistry(Button, {
						BackgroundColor3 = 'MainColor';
					});

					local ButtonLabel = Library:CreateLabel({
						Size = UDim2.new(1, 0, 1, 0);
						TextSize = 14;
						Text = Name;
						TextXAlignment = Enum.TextXAlignment.Center;
						ZIndex = 7;
						Parent = Button;
					});

					local Block = Library:Create('Frame', {
						BackgroundColor3 = Library.BackgroundColor;
						BorderSizePixel = 0;
						Position = UDim2.new(0, 0, 1, 0);
						Size = UDim2.new(1, 0, 0, 1);
						Visible = false;
						ZIndex = 9;
						Parent = Button;
					});

					Library:AddToRegistry(Block, {
						BackgroundColor3 = 'BackgroundColor';
					});

					local Container = Library:Create('Frame', {
						Position = UDim2.new(0, 4, 0, 20);
						Size = UDim2.new(1, -4, 1, -20);
						ZIndex = 1;
						Visible = false;
						Parent = BoxInner;
					});

					Library:Create('UIListLayout', {
						FillDirection = Enum.FillDirection.Vertical;
						SortOrder = Enum.SortOrder.LayoutOrder;
						Parent = Container;
					});

					function Tab:Show()
						for _, Tab in next, Tabbox.Tabs do
							Tab:Hide();
						end;

						Container.Visible = true;
						Block.Visible = true;

						Button.BackgroundColor3 = Library.BackgroundColor;
						Library.RegistryMap[Button].Properties.BackgroundColor3 = 'BackgroundColor';
					end;

					function Tab:Hide()
						Container.Visible = false;
						Block.Visible = false;

						Button.BackgroundColor3 = Library.MainColor;
						Library.RegistryMap[Button].Properties.BackgroundColor3 = 'MainColor';
					end;

					function Tab:Resize()
						local TabCount = 0;

						for _, Tab in next, Tabbox.Tabs do
							TabCount = TabCount +  1;
						end;

						for _, Button in next, TabboxButtons:GetChildren() do
							if not Button:IsA('UIListLayout') then
								Button.Size = UDim2.new(1 / TabCount, 0, 1, 0);
							end;
						end;

						local Size = 0;

						for _, Element in next, Tab.Container:GetChildren() do
							if not Element:IsA('UIListLayout') then
								Size = Size + Element.Size.Y.Offset;
							end;
						end;

						if BoxOuter.Size.Y.Offset < 20 + Size + 2 then
							BoxOuter.Size = UDim2.new(1, 0, 0, 20 + Size + 2);
						end;
					end;

					Button.InputBegan:Connect(function(Input)
						if Input.UserInputType == Enum.UserInputType.MouseButton1 and not Library:MouseIsOverOpenedFrame() then
							Tab:Show();
						end;
					end);

					Tab.Container = Container;
					Tabbox.Tabs[Name] = Tab;

					setmetatable(Tab, BaseGroupbox);

					Tab:AddBlank(3);
					Tab:Resize();

					if #TabboxButtons:GetChildren() == 2 then
						Tab:Show();
					end;

					return Tab;
				end;

				Tab.Tabboxes[Info.Name or ''] = Tabbox;

				return Tabbox;
			end;

			function Tab:AddLeftTabbox(Name)
				return Tab:AddTabbox({ Name = Name, Side = 1; });
			end;

			function Tab:AddRightTabbox(Name)
				return Tab:AddTabbox({ Name = Name, Side = 2; });
			end;

			TabButton.InputBegan:Connect(function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 then
					Tab:ShowTab();
				end;
			end);

			-- This was the first tab added, so we show it by default.
			if #TabContainer:GetChildren() == 1 then
				Tab:ShowTab();
			end;

			Window.Tabs[Name] = Tab;
			return Tab;
		end;

		local ModalElement = Library:Create('TextButton', {
			BackgroundTransparency = 1;
			Size = UDim2.new(0, 0, 0, 0);
			Visible = true;
			Text = '';
			Modal = false;
			Parent = ScreenGui;
		});

		function Library.Toggle()
			Outer.Visible = not Outer.Visible;
			ModalElement.Modal = Outer.Visible;

			local oIcon = Mouse.Icon;
			local State = InputService.MouseIconEnabled;

			local Cursor = Drawing.new('Triangle');
			Cursor.Thickness = 1;
			Cursor.Filled = true;

			while Outer.Visible do
				local mPos = workspace.CurrentCamera:WorldToViewportPoint(Mouse.Hit.p);

				Cursor.Color = Library.AccentColor;
				Cursor.PointA = Vector2.new(mPos.X, mPos.Y);
				Cursor.PointB = Vector2.new(mPos.X, mPos.Y) + Vector2.new(6, 14);
				Cursor.PointC = Vector2.new(mPos.X, mPos.Y) + Vector2.new(-6, 14);

				Cursor.Visible = not InputService.MouseIconEnabled;

				RenderStepped:Wait();
			end;

			Cursor:Remove();
		end

		Library:GiveSignal(InputService.InputBegan:Connect(function(Input, Processed)
			if type(Library.ToggleKeybind) == 'table' and Library.ToggleKeybind.Type == 'KeyPicker' then
				if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode.Name == Library.ToggleKeybind.Value then
					task.spawn(Library.Toggle)
				end
			elseif Input.KeyCode == Enum.KeyCode.RightControl or (Input.KeyCode == Enum.KeyCode.RightShift and (not Processed)) then
				task.spawn(Library.Toggle)
			end

		end))

		if Config.AutoShow then task.spawn(Library.Toggle) end

		Window.Holder = Outer;

		return Window;
	end;

	local httpService = game:GetService('HttpService')
	local ThemeManager = {} do
		ThemeManager.Folder = 'LinoriaLibSettings'
		-- if not isfolder(ThemeManager.Folder) then makefolder(ThemeManager.Folder) end

		ThemeManager.Library = nil
		ThemeManager.BuiltInThemes = {                                      --05d1e5
			['Fenril Hub'] 		= { 1, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1c1c1c","AccentColor":"0EDEFF","BackgroundColor":"141414","OutlineColor":"323232"}') },
			['Dracula'] 		= { 2, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"232533","AccentColor":"6271a5","BackgroundColor":"1b1c27","OutlineColor":"7c82a7"}') },
			['Bitch Bot'] 		= { 3, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1e1e","AccentColor":"7e48a3","BackgroundColor":"232323","OutlineColor":"141414"}') },
			['Fatality'] 		= { 4, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"1e1842","AccentColor":"c50754","BackgroundColor":"191335","OutlineColor":"3c355d"}') },
			['Green'] 			= { 5, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"141414","AccentColor":"00ff8b","BackgroundColor":"1c1c1c","OutlineColor":"3c3c3c"}') },
			['Jester'] 			= { 6, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"db4467","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
			['Mint'] 			= { 7, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"242424","AccentColor":"3db488","BackgroundColor":"1c1c1c","OutlineColor":"373737"}') },
			['Tokyo Night'] 	= { 8, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"191925","AccentColor":"6759b3","BackgroundColor":"16161f","OutlineColor":"323232"}') },
			['Ubuntu'] 			= { 9, httpService:JSONDecode('{"FontColor":"ffffff","MainColor":"3e3e3e","AccentColor":"e2581e","BackgroundColor":"323232","OutlineColor":"191919"}') },
		}

		function ThemeManager:ApplyTheme(theme)
			local customThemeData = self:GetCustomTheme(theme)
			local data = customThemeData or self.BuiltInThemes[theme]

			if not data then return end

			-- custom themes are just regular dictionaries instead of an array with { index, dictionary }

			local scheme = data[2]
			for idx, col in next, customThemeData or scheme do
				self.Library[idx] = Color3.fromHex(col)

				if Options[idx] then
					Options[idx]:SetValueRGB(Color3.fromHex(col))
				end
			end

			self:ThemeUpdate()
		end

		function ThemeManager:ThemeUpdate()
			self.Library.FontColor = Options.FontColor.Value
			self.Library.MainColor = Options.MainColor.Value
			self.Library.AccentColor = Options.AccentColor.Value
			self.Library.BackgroundColor = Options.BackgroundColor.Value
			self.Library.OutlineColor = Options.OutlineColor.Value

			self.Library.AccentColorDark = self.Library:GetDarkerColor(self.Library.AccentColor);
			self.Library:UpdateColorsUsingRegistry()
		end

		function ThemeManager:LoadDefault()		
			local theme = 'Default'
			local content = isfile(self.Folder .. '/themes/default.txt') and readfile(self.Folder .. '/themes/default.txt')

			local isDefault = true
			if content then
				if self.BuiltInThemes[content] then
					theme = content
				elseif self:GetCustomTheme(content) then
					theme = content
					isDefault = false;
				end
			elseif self.BuiltInThemes[self.DefaultTheme] then
				theme = self.DefaultTheme
			end

			if isDefault then
				Options.ThemeManager_ThemeList:SetValue(theme)
			else
				self:ApplyTheme(theme)
			end
		end

		function ThemeManager:SaveDefault(theme)
			writefile(self.Folder .. '/themes/default.txt', theme)
		end

		function ThemeManager:CreateThemeManager(groupbox)
			groupbox:AddLabel('Background color'):AddColorPicker('BackgroundColor', { Default = self.Library.BackgroundColor });
			groupbox:AddLabel('Main color')	:AddColorPicker('MainColor', { Default = self.Library.MainColor });
			groupbox:AddLabel('Accent color'):AddColorPicker('AccentColor', { Default = self.Library.AccentColor });
			groupbox:AddLabel('Outline color'):AddColorPicker('OutlineColor', { Default = self.Library.OutlineColor });
			groupbox:AddLabel('Font color')	:AddColorPicker('FontColor', { Default = self.Library.FontColor });

			local ThemesArray = {}
			for Name, Theme in next, self.BuiltInThemes do
				table.insert(ThemesArray, Name)
			end

			table.sort(ThemesArray, function(a, b) return self.BuiltInThemes[a][1] < self.BuiltInThemes[b][1] end)

			groupbox:AddDivider()
			groupbox:AddDropdown('ThemeManager_ThemeList', { Text = 'Theme list', Values = ThemesArray, Default = 1 })

			groupbox:AddButton('Set as default', function()
				self:SaveDefault(Options.ThemeManager_ThemeList.Value)
				self.Library:Notify(string.format('Set default theme to %q', Options.ThemeManager_ThemeList.Value))
			end)

			Options.ThemeManager_ThemeList:OnChanged(function()
				self:ApplyTheme(Options.ThemeManager_ThemeList.Value)
			end)

			groupbox:AddDivider()
			groupbox:AddDropdown('ThemeManager_CustomThemeList', { Text = 'Custom themes', Values = self:ReloadCustomThemes(), AllowNull = true, Default = 1 })
			groupbox:AddInput('ThemeManager_CustomThemeName', { Text = 'Custom theme name' })

			groupbox:AddButton('Load custom theme', function() 
				self:ApplyTheme(Options.ThemeManager_CustomThemeList.Value) 
			end)

			groupbox:AddButton('Save custom theme', function() 
				self:SaveCustomTheme(Options.ThemeManager_CustomThemeName.Value)

				Options.ThemeManager_CustomThemeList.Values = self:ReloadCustomThemes()
				Options.ThemeManager_CustomThemeList:SetValues()
				Options.ThemeManager_CustomThemeList:SetValue(nil)
			end)

			groupbox:AddButton('Refresh list', function()
				Options.ThemeManager_CustomThemeList.Values = self:ReloadCustomThemes()
				Options.ThemeManager_CustomThemeList:SetValues()
				Options.ThemeManager_CustomThemeList:SetValue(nil)
			end)

			groupbox:AddButton('Set as default', function()
				if Options.ThemeManager_CustomThemeList.Value ~= nil and Options.ThemeManager_CustomThemeList.Value ~= '' then
					self:SaveDefault(Options.ThemeManager_CustomThemeList.Value)
					self.Library:Notify(string.format('Set default theme to %q', Options.ThemeManager_CustomThemeList.Value))
				end
			end)

			ThemeManager:LoadDefault()

			local function UpdateTheme()
				self:ThemeUpdate()
			end

			Options.BackgroundColor:OnChanged(UpdateTheme)
			Options.MainColor:OnChanged(UpdateTheme)
			Options.AccentColor:OnChanged(UpdateTheme)
			Options.OutlineColor:OnChanged(UpdateTheme)
			Options.FontColor:OnChanged(UpdateTheme)
		end

		function ThemeManager:GetCustomTheme(file)
			local path = self.Folder .. '/themes/' .. file
			if not isfile(path) then
				return nil
			end

			local data = readfile(path)
			local success, decoded = pcall(httpService.JSONDecode, httpService, data)

			if not success then
				return nil
			end

			return decoded
		end

		function ThemeManager:SaveCustomTheme(file)
			if file:gsub(' ', '') == '' then
				return self.Library:Notify('Invalid file name for theme (empty)', 3)
			end

			local theme = {}
			local fields = { "FontColor", "MainColor", "AccentColor", "BackgroundColor", "OutlineColor" }

			for _, field in next, fields do
				theme[field] = Options[field].Value:ToHex()
			end

			writefile(self.Folder .. '/themes/' .. file .. '.json', httpService:JSONEncode(theme))
		end

		function ThemeManager:ReloadCustomThemes()
			local list = listfiles(self.Folder .. '/themes')

			local out = {}
			for i = 1, #list do
				local file = list[i]
				if file:sub(-5) == '.json' then
					-- i hate this but it has to be done ...

					local pos = file:find('.json', 1, true)
					local char = file:sub(pos, pos)

					while char ~= '/' and char ~= '\\' and char ~= '' do
						pos = pos - 1
						char = file:sub(pos, pos)
					end

					if char == '/' or char == '\\' then
						table.insert(out, file:sub(pos + 1))
					end
				end
			end

			return out
		end

		function ThemeManager:SetLibrary(lib)
			self.Library = lib
		end

		function ThemeManager:BuildFolderTree()
			local paths = {}

			-- build the entire tree if a path is like some-hub/phantom-forces
			-- makefolder builds the entire tree on Synapse X but not other exploits

			local parts = self.Folder:split('/')
			for idx = 1, #parts do
				paths[#paths + 1] = table.concat(parts, '/', 1, idx)
			end

			table.insert(paths, self.Folder .. '/themes')
			table.insert(paths, self.Folder .. '/settings')

			for i = 1, #paths do
				local str = paths[i]
				if not isfolder(str) then
					makefolder(str)
				end
			end
		end

		function ThemeManager:SetFolder(folder)
			self.Folder = folder
			self:BuildFolderTree()
		end

		function ThemeManager:CreateGroupBox(tab)
			assert(self.Library, 'Must set ThemeManager.Library first!')
			return tab:AddLeftGroupbox('Themes')
		end

		function ThemeManager:ApplyToTab(tab)
			assert(self.Library, 'Must set ThemeManager.Library first!')
			local groupbox = self:CreateGroupBox(tab)
			self:CreateThemeManager(groupbox)
		end

		function ThemeManager:ApplyToGroupbox(groupbox)
			assert(self.Library, 'Must set ThemeManager.Library first!')
			self:CreateThemeManager(groupbox)
		end

		ThemeManager:BuildFolderTree()
	end
	function toggleuilib()
		game:GetService("VirtualInputManager"):SendKeyEvent(true,"RightControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
		wait(sec)
		game:GetService("VirtualInputManager"):SendKeyEvent(false,"RightControl",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
	end
	local SaveManager = loadstring([[local httpService = game:GetService('HttpService')

local SaveManager = {} do
	SaveManager.Folder = 'Deity Hub Next Generation'
	SaveManager.Ignore = {}
	SaveManager.Parser = {
		Toggle = {
			Save = function(idx, object) 
				return { type = 'Toggle', idx = idx, value = object.Value } 
			end,
			Load = function(idx, data)
				if Toggles[idx] then 
					Toggles[idx]:SetValue(data.value)
				end
			end,
		},
		Slider = {
			Save = function(idx, object)
				return { type = 'Slider', idx = idx, value = tostring(object.Value) }
			end,
			Load = function(idx, data)
				if Options[idx] then 
					Options[idx]:SetValue(data.value)
				end
			end,
		},
		Dropdown = {
			Save = function(idx, object)
				return { type = 'Dropdown', idx = idx, value = object.Value, mutli = object.Multi }
			end,
			Load = function(idx, data)
				if Options[idx] then 
					Options[idx]:SetValue(data.value)
				end
			end,
		},
		ColorPicker = {
			Save = function(idx, object)
				return { type = 'ColorPicker', idx = idx, value = object.Value:ToHex() }
			end,
			Load = function(idx, data)
				if Options[idx] then 
					Options[idx]:SetValueRGB(Color3.fromHex(data.value))
				end
			end,
		},
		KeyPicker = {
			Save = function(idx, object)
				return { type = 'KeyPicker', idx = idx, mode = object.Mode, key = object.Value }
			end,
			Load = function(idx, data)
				if Options[idx] then 
					Options[idx]:SetValue({ data.key, data.mode })
				end
			end,
		}
	}

	function SaveManager:SetIgnoreIndexes(list)
		for _, key in next, list do
			self.Ignore[key] = true
		end
	end

	function SaveManager:SetFolder(folder)
		self.Folder = folder;
		self:BuildFolderTree()
	end

	function SaveManager:Save(name)
		local fullPath = self.Folder .. '/settings/' .. name .. '.json'

		local data = {
			objects = {}
		}

		for idx, toggle in next, Toggles do
			if self.Ignore[idx] then continue end

			table.insert(data.objects, self.Parser[toggle.Type].Save(idx, toggle))
		end

		for idx, option in next, Options do
			if not self.Parser[option.Type] then continue end
			if self.Ignore[idx] then continue end

			table.insert(data.objects, self.Parser[option.Type].Save(idx, option))
		end	

		local success, encoded = pcall(httpService.JSONEncode, httpService, data)
		if not success then
			return false, 'failed to encode data'
		end

		writefile(fullPath, encoded)
		return true
	end

	function SaveManager:Load(name)
		local file = self.Folder .. '/settings/' .. name .. '.json'
		if not isfile(file) then return false, 'invalid file' end

		local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
		if not success then return false, 'decode error' end

		for _, option in next, decoded.objects do
			if self.Parser[option.type] then
				self.Parser[option.type].Load(option.idx, option)
			end
		end

		return true
	end

	function SaveManager:IgnoreThemeSettings()
		self:SetIgnoreIndexes({ 
			"BackgroundColor", "MainColor", "AccentColor", "OutlineColor", "FontColor", -- themes
			"ThemeManager_ThemeList", 'ThemeManager_CustomThemeList', 'ThemeManager_CustomThemeName', -- themes
		})
	end

	function SaveManager:BuildFolderTree()
		local paths = {
			self.Folder,
			self.Folder .. '/themes',
			self.Folder .. '/settings'
		}

		for i = 1, #paths do
			local str = paths[i]
			if not isfolder(str) then
				makefolder(str)
			end
		end
	end

	function SaveManager:RefreshConfigList()
		local list = listfiles(self.Folder .. '/settings')

		local out = {}
		for i = 1, #list do
			local file = list[i]
			if file:sub(-5) == '.json' then
				-- i hate this but it has to be done ...

				local pos = file:find('.json', 1, true)
				local start = pos

				local char = file:sub(pos, pos)
				while char ~= '/' and char ~= '\\' and char ~= '' do
					pos = pos - 1
					char = file:sub(pos, pos)
				end

				if char == '/' or char == '\\' then
					table.insert(out, file:sub(pos + 1, start - 1))
				end
			end
		end
		
		return out
	end

	function SaveManager:SetLibrary(library)
		self.Library = library
	end

	function SaveManager:LoadAutoloadConfig()
		if isfile(self.Folder .. '/settings/autoload.txt') then
			local name = readfile(self.Folder .. '/settings/autoload.txt')

			local success, err = self:Load(name)
			if not success then
				return self.Library:Notify('Failed to load autoload config: ' .. err)
			end

			self.Library:Notify(string.format('Auto loaded config %q', name))
		end
	end


	function SaveManager:BuildConfigSection(tab)
		assert(self.Library, 'Must set SaveManager.Library')

		local section = tab:AddRightGroupbox('Configuration')

		section:AddDropdown('SaveManager_ConfigList', { Text = 'Config list', Values = self:RefreshConfigList(), AllowNull = true })
		section:AddInput('SaveManager_ConfigName',    { Text = 'Config name' })

		section:AddDivider()

		section:AddButton('Create config', function()
			local name = Options.SaveManager_ConfigName.Value

			if name:gsub(' ', '') == '' then 
				return self.Library:Notify('Invalid config name (empty)', 2)
			end

			local success, err = self:Save(name)
			if not success then
				return self.Library:Notify('Failed to save config: ' .. err)
			end

			self.Library:Notify(string.format('Created config %q', name))

			Options.SaveManager_ConfigList.Values = self:RefreshConfigList()
			Options.SaveManager_ConfigList:SetValues()
			Options.SaveManager_ConfigList:SetValue(nil)
		end):AddButton('Load config', function()
			local name = Options.SaveManager_ConfigList.Value

			local success, err = self:Load(name)
			if not success then
				return self.Library:Notify('Failed to load config: ' .. err)
			end

			self.Library:Notify(string.format('Loaded config %q', name))
		end)

		section:AddButton('Overwrite config', function()
			local name = Options.SaveManager_ConfigList.Value

			local success, err = self:Save(name)
			if not success then
				return self.Library:Notify('Failed to overwrite config: ' .. err)
			end

			self.Library:Notify(string.format('Overwrote config %q', name))
		end)
		
		section:AddButton('Autoload config', function()
			local name = Options.SaveManager_ConfigList.Value
			writefile(self.Folder .. '/settings/autoload.txt', name)
			SaveManager.AutoloadLabel:SetText('Current autoload config: ' .. name)
			self.Library:Notify(string.format('Set %q to auto load', name))
		end)

		section:AddButton('Refresh config list', function()
			Options.SaveManager_ConfigList.Values = self:RefreshConfigList()
			Options.SaveManager_ConfigList:SetValues()
			Options.SaveManager_ConfigList:SetValue(nil)
		end)

		SaveManager.AutoloadLabel = section:AddLabel('Current autoload config: none', true)

		if isfile(self.Folder .. '/settings/autoload.txt') then
			local name = readfile(self.Folder .. '/settings/autoload.txt')
			SaveManager.AutoloadLabel:SetText('Current autoload config: ' .. name)
		end

		SaveManager:SetIgnoreIndexes({ 'SaveManager_ConfigList', 'SaveManager_ConfigName' })
	end

	SaveManager:BuildFolderTree()
end

return SaveManager]])()

	local Window = Library:CreateWindow({
		Title = 'Fenril Hub Combat Warriors - '..os.date("%A")..", "..os.date("%B").." "..os.date("%d") ..", ".. os.date("%Y")..".",
		Center = true, 
		AutoShow = true,
	})

	local Tabs = {
		Main = Window:AddTab('Main'), 
		Visual = Window:AddTab('Visual'),
		['UI Settings'] = Window:AddTab('UI Settings'),
	}

	local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')


	MenuGroup:AddButton('Unload', function() Library:Unload() end)
	MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' }) 

	Library.ToggleKeybind = Options.MenuKeybind

	-- ThemeManager:SetLibrary(Library)
	SaveManager:SetLibrary(Library)


	SaveManager:IgnoreThemeSettings() 


	SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

	-- ThemeManager:SetFolder('MyScriptHub')
	SaveManager:SetFolder('MyScriptHub/specific-game')

	SaveManager:BuildConfigSection(Tabs['UI Settings']) 


	-- ThemeManager:ApplyToTab(Tabs['UI Settings'])

	---------------------_G.Save--------------------------------
	_G.Save = {
		["AutoFarm"] = false,
		["Noclip"] = false,
		["WalkSpeed"] = 16,
		["JumpPower"] = 50,
		["KillAura"] = false,
		["AutoParry"] = false,
		["NoParryCooldown"] = false,
		["NoFallDamage"] = false,
		["AntiDamage"] = false,
		["NoRagdoll"] = false,
		["AutoRejoin"] = false,
		["AutoHopServerFarm"] = false,
		["TimeToHop"] = 500,
		["FastSelfRevive"] = false,
		["KillAuraCooldown"] = 0.1,
		["AutoParryCooldown"] = 0.1,
		["UseKillAuraCooldown"] = false,
		["UseAutoParryCooldown"] = false,
		["InfJump"] = false,
		["noclip"] = false,
		["killsay"] = false,
		["hidename"] = false,
		["walkonwater"] = false,
		["infstamina"] = false,
		["getallemotes"] = false,
		["NoJumpCooldown"] = false,
		["NoDashCooldown"] = false,
		["FastGhostPotionDrink"] = false,
		["AirGenWater"] = false,
		["FasterBearTrap"] = false,
		["ThrowMolotov"] = false, 
		["AutoAirDrop"] = false,
		["WhiteScreen"] = false,
		["FpsLock"] = 240,
		["OpenFpsLock"] = false,
		["FastRpgReload"] = false,
		["NoKunaiCooldown"] = false,
		["NoRecoil"] = false,
		["NoCharge"] = false,
		["UnlockEmote"] = false,
		["NoDropOff"] = false,
		["WallBang"] = false,
		["NoReloadTime"] = false,
		["Aimbot"] = false,
		["SelectAimPart"] = "Head",
		["SlientAim"] = false,
		["AutoShoot"] = false,
	}

	function loadcheck()
		if isfile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json") then
			g = readfile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json")
			return g
		else
			writefile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json",game:GetService("HttpService"):JSONEncode(_G.Save))
			return
		end
	end

	function LoadSetting()
		if isfile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json") then
			vb = game:GetService("HttpService"):JSONDecode(readfile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json"))
			_G.Save = vb
			return vb
		else
			loadcheck()
			return
		end
	end

	function SaveSetting()
		if isfile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json") then
			f = writefile
			writefile("FenrilHub_Combat_Warriors "..game.Players.LocalPlayer.Name..".json",game:GetService("HttpService"):JSONEncode(_G.Save))
			return f
		else
			loadcheck()
			return
		end
	end

	loadcheck()
	LoadSetting()

	-------------------------Ui---------------------------------
	local LeftGroupBox = Tabs.Main:AddLeftGroupbox('[ Main ]')

	LeftGroupBox:AddToggle('AutoFarm', {Text = 'Auto Farm', Default = _G.Save["AutoFarm"], Tooltip = 'Auto Farm'})

	Toggles.AutoFarm:OnChanged(function()
		_G.Save["AutoFarm"] = Toggles.AutoFarm.Value
		SaveSetting()
	end)

	Toggles.AutoFarm:SetValue(_G.Save["AutoFarm"])


	LeftGroupBox:AddToggle('AutoAirDrop', {Text = 'Auto Air Drop', Default = _G.Save["AutoAirDrop"], Tooltip = 'AutoAirDrop'})

	Toggles.AutoAirDrop:OnChanged(function()
		_G.Save["AutoAirDrop"] = Toggles.AutoAirDrop.Value
		SaveSetting()
	end)

	Toggles.AutoAirDrop:SetValue(_G.Save["AutoAirDrop"])


	LeftGroupBox:AddToggle('KillAura', {Text = 'Kill Aura', Default = _G.Save["KillAura"], Tooltip = 'KillAura'})

	Toggles.KillAura:OnChanged(function()
		_G.Save["KillAura"] = Toggles.KillAura.Value
		SaveSetting()
	end)

	Toggles.KillAura:SetValue(_G.Save["KillAura"])
	LeftGroupBox:AddToggle('UseKillAuraCooldown', {Text = 'Use Kill Aura Cooldown', Default = _G.Save["UseKillAuraCooldown"], Tooltip = 'UseKillAuraCooldown'})

	Toggles.UseKillAuraCooldown:OnChanged(function()
		_G.Save["UseKillAuraCooldown"] = Toggles.UseKillAuraCooldown.Value
		SaveSetting()
		if _G.Save["UseKillAuraCooldown"] then 
			Library:Notify("Don't Open This Kill Aura Will Fast")  
		end
	end)

	Toggles.UseKillAuraCooldown:SetValue(_G.Save["UseKillAuraCooldown"])



	LeftGroupBox:AddInput('KillAuraCooldown', {
		Default = _G.Save["KillAuraCooldown"],
		Numeric = false,
		Finished = false,

		Text = 'Kill Aura Cooldown',
		Placeholder = 'Enter Time(Sec)', 
	})

	Options.KillAuraCooldown:OnChanged(function()
		_G.Save["KillAuraCooldown"] = Options.KillAuraCooldown.Value
		SaveSetting()
	end)

	function expandHitbox()
		local player = game.Players.LocalPlayer
		local mouse = player:GetMouse()
	
		for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
			if v:IsA("Tool") then
				for i,v in pairs(v.Hitboxes.Hitbox:GetChildren()) do
					if v.Name == "DmgPoint" then
						v.Position = v.Position + Vector3.new(0, math.random(-2, 10), 0)
						v.Visible = true
					end
				end
			end
		end
	end
	
	function AutoParry()
		local Magnitude = 15
	
		local players = game:GetService("Players")
		local client = players.LocalPlayer
		local camera = workspace.CurrentCamera
	
		local function iskeydown(enum)
			return game:GetService("UserInputService"):IsKeyDown(enum)
		end
		local function keyclick(enum)
			local vim = game:GetService("VirtualInputManager")
			return vim:SendKeyEvent(true, enum, false, game) and task.wait() and vim:SendKeyEvent(false, enum, false, game)
		end
	
		local function lookAt(character)
			spawn(function()
				for i=0, 1, 0.1  do
					local goal = camera.CFrame:Lerp(CFrame.lookAt(camera.CFrame.Position, character.HumanoidRootPart.Position), i)
					camera.CFrame = goal
					task.wait()
				end
			end)
		end
		local function islooking(chr, sensitivity)
			return chr.HumanoidRootPart.CFrame.LookVector:Dot(client.Character.HumanoidRootPart.Position) >= sensitivity
		end
	
		local function Update(plr)
			if plr ~= game.Players.LocalPlayer then 
				local function onRespawn(chr)
					local tool;
					repeat
						task.wait()
						if chr:FindFirstChild("SemiTransparentShield") and chr:FindFirstChild("HumanoidRootPart") and chr:FindFirstChildOfClass("Tool") and chr:FindFirstChildOfClass("Tool"):FindFirstChild("Hitboxes") then
							tool = chr:FindFirstChildOfClass("Tool")
						end
					until tool and tool:IsA("Tool") and tool:FindFirstChild("Hitboxes")
	
					do -- [[Auto Parry]]
						local function autoParry(child)
							if client.Character:FindFirstChildOfClass("Tool") and client.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Hitboxes") and child:IsA("Sound") and not iskeydown(Enum.KeyCode.C) and (chr.HumanoidRootPart.Position - client.Character.HumanoidRootPart.Position).Magnitude < Magnitude then
								local looking = islooking(chr, 0.25)
								if looking then
									keyclick(Enum.KeyCode.F)
								else
									lookAt(chr)
									keyclick(Enum.KeyCode.F)
								end
							end
						end
	
						if tool.Hitboxes:FindFirstChild("Hitbox") then
							print("applied")
							tool.Hitboxes.Hitbox.ChildAdded:Connect(autoParry)
						elseif tool.Hitboxes:FindFirstChild("Weapon1Hitbox") and tool.Hitboxes:FindFirstChild("Weapon2Hitbox") then
							print("applied")
							tool.Hitboxes.Weapon1Hitbox.ChildAdded:Connect(autoParry)
							tool.Hitboxes.Weapon2Hitbox.ChildAdded:Connect(autoParry)
						end
					end
	
					do -- [[Anti Parry]]
						local function antiParry(child)
							if child:IsA("Sound") and client.Character:FindFirstChildOfClass("Tool") and client.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Hitboxes") and (chr.HumanoidRootPart.Position - client.Character.HumanoidRootPart.Position).Magnitude < Magnitude then
								local looking = islooking(chr, 0.25)
								if looking then
									local tool = client.Character:FindFirstChildOfClass("Tool")
									client.Character.Humanoid:UnequipTools()
									chr.SemiTransparentShield:GetPropertyChangedSignal("Transparency"):Wait()
									client.Character.Humanoid:EquipTool(tool)
								end
							end
						end
						chr.SemiTransparentShield.ChildAdded:Connect(antiParry)
					end
				end
	
				if plr.Character ~= nil then
					task.spawn(onRespawn, plr.Character)
				end
				plr.CharacterAdded:Connect(function(chr)
					task.spawn(onRespawn, chr)
				end)
			end
		end
		for _,v in next, players:GetPlayers() do
			task.spawn(Update, v)
		end
		players.PlayerAdded:Connect(function(plr)
			task.spawn(Update, plr)
		end)
	end

	LeftGroupBox:AddToggle('AutoParry', {Text = 'Auto Parry', Default = _G.Save["AutoParry"], Tooltip = 'AutoParry'})

	Toggles.AutoParry:OnChanged(function()
		_G.Save["AutoParry"] = Toggles.AutoParry.Value
		expandHitbox()
AutoParry()
		SaveSetting()
	end)

	Toggles.AutoParry:SetValue(_G.Save["AutoParry"])

	LeftGroupBox:AddToggle('UseAutoParryCooldown', {Text = 'Use Auto Parry Cooldown', Default = _G.Save["UseAutoParryCooldown"], Tooltip = 'UseAutoParryCooldown'})

	Toggles.UseAutoParryCooldown:OnChanged(function()
		_G.Save["UseAutoParryCooldown"] = Toggles.UseAutoParryCooldown.Value
		SaveSetting()
		if _G.Save["UseAutoParryCooldown"] then 
			Library:Notify("Don't Open This Auto Parry Will Fast",5)
		end
	end)

	Toggles.UseAutoParryCooldown:SetValue(_G.Save["UseAutoParryCooldown"])


	LeftGroupBox:AddInput('AutoParryCooldown', {
		Default = _G.Save["AutoParryCooldown"],
		Numeric = false,
		Finished = false,

		Text = 'Auto Parry Cooldown',
		Placeholder = 'Enter Time(Sec)', 
	})

	Options.AutoParryCooldown:OnChanged(function()
		_G.Save["AutoParryCooldown"] = Options.AutoParryCooldown.Value
		SaveSetting()
	end)




	LeftGroupBox:AddToggle('NoParryCooldown', {Text = 'No Parry Cooldown', Default = _G.Save["NoParryCooldown"], Tooltip = 'NoParryCooldown'})

	Toggles.NoParryCooldown:OnChanged(function()
		_G.Save["NoParryCooldown"] = Toggles.NoParryCooldown.Value
		SaveSetting()
		if _G.Save["UseAutoParryCooldown"] then 

			if _G.Save["NoParryCooldown"] then
				for i,v in pairs(getgc(true)) do
					if type(v) == "table" and rawget(v, "PARRY_COOLDOWN_IN_SECONDS") and rawget(v, "PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY") then
						v.PARRY_COOLDOWN_IN_SECONDS = _G.Save["AutoParryCooldown"]
						v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = _G.Save["AutoParryCooldown"]
					end
				end
			else 
				for i,v in pairs(getgc(true)) do
					if type(v) == "table" and rawget(v, "PARRY_COOLDOWN_IN_SECONDS") and rawget(v, "PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY") then
						v.PARRY_COOLDOWN_IN_SECONDS = 3
						v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = 0.33
					end
				end
			end

		else
			if _G.Save["NoParryCooldown"] then
				for i,v in pairs(getgc(true)) do
					if type(v) == "table" and rawget(v, "PARRY_COOLDOWN_IN_SECONDS") and rawget(v, "PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY") then
						v.PARRY_COOLDOWN_IN_SECONDS = 0
						v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = 0
					end
				end
			else 
				for i,v in pairs(getgc(true)) do
					if type(v) == "table" and rawget(v, "PARRY_COOLDOWN_IN_SECONDS") and rawget(v, "PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY") then
						v.PARRY_COOLDOWN_IN_SECONDS = 3
						v.PARRY_COOLDOWN_IN_SECONDS_AFTER_SUCCESSFUL_PARRY = 0.33
					end
				end
			end 
		end

	end)

	Toggles.NoParryCooldown:SetValue(_G.Save["NoParryCooldown"])
	local Misc = Tabs.Main:AddLeftGroupbox('[ Misc ]')

	Misc:AddToggle('NoFallDamage', {Text = 'No Fall Damage', Default = _G.Save["NoFallDamage"], Tooltip = 'NoFallDamage'})

	Toggles.NoFallDamage:OnChanged(function()
		_G.Save["NoFallDamage"] = Toggles.NoFallDamage.Value
		SaveSetting()
	end)

	Toggles.NoFallDamage:SetValue(_G.Save["NoFallDamage"])

	Misc:AddToggle('AntiDamage', {Text = 'Anti Damage For Any Item', Default = _G.Save["AntiDamage"], Tooltip = 'AntiDamage'})

	Toggles.AntiDamage:OnChanged(function()
		_G.Save["AntiDamage"] = Toggles.AntiDamage.Value
		SaveSetting()
	end)

	Toggles.AntiDamage:SetValue(_G.Save["AntiDamage"])

	Misc:AddToggle('NoRagdoll', {Text = 'No Ragdoll', Default = _G.Save["NoRagdoll"], Tooltip = 'NoRagdoll'})

	Toggles.NoRagdoll:OnChanged(function()
		_G.Save["NoRagdoll"] = Toggles.NoRagdoll.Value
		SaveSetting()

		for i,v in pairs(getgc(true)) do
			if typeof(v) == "table" and rawget(v, "toggleRagdoll") then
				local old = v.toggleRagdoll
				v.toggleRagdoll = function(among, us, irl)
					if _G.Save["NoRagdoll"] then
						return 
					else 
						return old(among,us,irl)
					end
				end
			end
		end
	end)
	Misc:AddToggle('UnlockEmote', {Text = 'Unlock Emote', Default = _G.Save["UnlockEmote"], Tooltip = 'UnlockEmote'})

	Toggles.UnlockEmote:OnChanged(function()
		_G.Save["UnlockEmote"] = Toggles.UnlockEmote.Value
		SaveSetting()

		for i,v in pairs(getgc(true)) do
			if typeof(v) == "table" and rawget(v, "gamepassIdRequired") then
				if v.gamepassIdRequired ==  "danceEmotes" then
					v.gamepassIdRequired = nil
				elseif v.gamepassIdRequired == "toxicEmotes" then
					v.gamepassIdRequired = nil
				elseif v.gamepassIdRequired == "respectEmotes" then
					v.gamepassIdRequired = nil
				end
			end
		end
	end)

	Toggles.NoRagdoll:SetValue(_G.Save["NoRagdoll"])

	Misc:AddToggle('AutoRejoin', {Text = 'Auto Rejoin', Default = _G.Save["AutoRejoin"], Tooltip = 'AutoRejoin'})

	Toggles.AutoRejoin:OnChanged(function()
		_G.Save["AutoRejoin"] = Toggles.AutoRejoin.Value
		SaveSetting()
	end)

	Toggles.AutoRejoin:SetValue(_G.Save["AutoRejoin"])

	Misc:AddToggle('AutoHopServerFarm', {Text = 'Auto Hop Server', Default = _G.Save["AutoHopServerFarm"], Tooltip = 'AutoHopServerFarm'})

	Toggles.AutoHopServerFarm:OnChanged(function()
		_G.Save["AutoHopServerFarm"] = Toggles.AutoHopServerFarm.Value
		SaveSetting()
	end)

	Toggles.AutoHopServerFarm:SetValue(_G.Save["AutoHopServerFarm"])

	Misc:AddInput('TimeToHop', {
		Default = _G.Save["TimeToHop"],
		Numeric = false,
		Finished = false,

		Text = 'Time To Hop',
		Placeholder = 'Enter Time(Sec)', 
	})

	Options.TimeToHop:OnChanged(function()
		_G.Save["TimeToHop"] = Options.TimeToHop.Value
		SaveSetting()
	end)
	-----CharacterMod------

	local CharacterMod = Tabs.Main:AddRightGroupbox('[ Character Mods ]')


	CharacterMod:AddToggle('ThrowMolotov', {Text = 'Faster Throw Molotov', Default = _G.Save["ThrowMolotov"], Tooltip = 'ThrowMolotov'})

	Toggles.ThrowMolotov:OnChanged(function()
		_G.Save["ThrowMolotov"] = Toggles.ThrowMolotov.Value
		SaveSetting()

		if _G.Save["ThrowMolotov"] then 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'preThrowDuration') then
					rawset(b, 'preThrowDuration', 0.2)
				end
			end
		end
	end)

	Toggles.ThrowMolotov:SetValue(_G.Save["ThrowMolotov"])

	CharacterMod:AddToggle('FastGhostPotionDrink', {Text = 'Faster Ghost Potion Drink', Default = _G.Save["FastGhostPotionDrink"], Tooltip = 'FastGhostPotionDrink'})

	Toggles.FastGhostPotionDrink:OnChanged(function()
		_G.Save["FastGhostPotionDrink"] = Toggles.FastGhostPotionDrink.Value
		SaveSetting()

		if _G.Save["FastGhostPotionDrink"] then 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'useTime') then
					rawset(b, 'useTime', 0.1)
				end
			end
		end
	end)

	Toggles.FastGhostPotionDrink:SetValue(_G.Save["FastGhostPotionDrink"])

	CharacterMod:AddToggle('AirGenWater', {Text = 'Air Gen In Water', Default = _G.Save["AirGenWater"], Tooltip = 'AirGenWater'})

	Toggles.AirGenWater:OnChanged(function()
		_G.Save["AirGenWater"] = Toggles.AirGenWater.Value
		SaveSetting()

		if _G.Save["AirGenWater"] then 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'AIR_TO_ADD_PER_SECOND_WHILE_SWIMMING') then
					rawset(b, 'AIR_TO_ADD_PER_SECOND_WHILE_SWIMMING',-15)  
				end 
			end
		end
	end)

	Toggles.AirGenWater:SetValue(_G.Save["AirGenWater"])

	CharacterMod:AddToggle('FasterBearTrap', {Text = 'Faster Bear Trap', Default = _G.Save["FasterBearTrap"], Tooltip = 'FasterBearTrap'})

	Toggles.FasterBearTrap:OnChanged(function()
		_G.Save["FasterBearTrap"] = Toggles.FasterBearTrap.Value
		SaveSetting()

		if _G.Save["FasterBearTrap"] then 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'useTime') then
					rawset(b, 'useTime', 0.01)
				end
			end
		end
	end)

	Toggles.FasterBearTrap:SetValue(_G.Save["FasterBearTrap"])


	CharacterMod:AddToggle('InfJump', {Text = 'Inf Jump', Default = _G.Save["InfJump"], Tooltip = 'InfJump'})

	Toggles.InfJump:OnChanged(function()
		_G.Save["InfJump"] = Toggles.InfJump.Value
		SaveSetting()
	end)

	Toggles.InfJump:SetValue(_G.Save["InfJump"])

	CharacterMod:AddToggle('NoDashCooldown', {Text = 'No Dash Cooldown', Default = _G.Save["NoDashCooldown"], Tooltip = 'NoDashCooldown'})

	Toggles.NoDashCooldown:OnChanged(function()
		_G.Save["NoDashCooldown"] = Toggles.NoDashCooldown.Value
		SaveSetting()
		for i,v2 in pairs(getgc(true)) do
			if typeof(v2) == "table" and rawget(v2, "DASH_COOLDOWN") then
				if _G.Save["NoDashCooldown"] then
					v2.DASH_COOLDOWN = 0
				else
					v2.DASH_COOLDOWN = 3

				end
			end
		end
	end)


	Toggles.NoDashCooldown:SetValue(_G.Save["NoDashCooldown"])



	CharacterMod:AddToggle('NoJumpCooldown', {Text = 'No Jump Cooldown', Default = _G.Save["NoJumpCooldown"], Tooltip = 'NoJumpCooldown'})

	Toggles.NoJumpCooldown:OnChanged(function()
		_G.Save["NoJumpCooldown"] = Toggles.NoJumpCooldown.Value
		SaveSetting()
		for i,v in pairs(getgc(true)) do
			if typeof(v) == "table" and rawget(v, "getCanJump") then
				local old = v.getCanJump
				if _G.Save["NoJumpCooldown"] then
					v.getCanJump = function()
						return true
					end
				else
					return old()
				end
			end
		end
	end)

	Toggles.NoJumpCooldown:SetValue(_G.Save["NoJumpCooldown"])
	CharacterMod:AddToggle('infstamina', {Text = "Inf Stamina", Default = _G.Save["infstamina"], Tooltip = 'infstamina'})

	Toggles.infstamina:OnChanged(function()
		_G.Save["infstamina"] = Toggles.infstamina.Value
		SaveSetting()

		for i,v in pairs(getgc(true)) do
			if typeof(v) == "table" and rawget(v, "_setStamina") then
				local old = v._setStamina
				v._setStamina = function(among, us)
					if _G.Save["infstamina"] then
						among._stamina = math.huge
						among._staminaChangedSignal:Fire(150)
					else
						return old(among, us)
					end
				end
			end
		end
	end)

	Toggles.infstamina:SetValue(_G.Save["infstamina"])

	------------------------------------------------------------

	-------Combat-----------


	local Combat = Tabs.Main:AddRightGroupbox('[ Combat ]')

	Combat:AddToggle('FastRpgReload', {Text = "Faster RPG Reload", Default = _G.Save["FastRpgReload"], Tooltip = 'FastRpgReload'})

	Toggles.FastRpgReload:OnChanged(function()
		_G.Save["FastRpgReload"] = Toggles.FastRpgReload.Value
		SaveSetting()
		if _G.Save["FastRpgReload"] then 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'reloadTime') then
					rawset(b, 'reloadTime', 0)
				end
			end
		else 
			for a,b in next, getgc(true) do
				if typeof(b) == 'table' and rawget(b, 'reloadTime') then
					rawset(b, 'reloadTime', 2.5)
				end
			end
		end
	end)

	Toggles.FastRpgReload:SetValue(_G.Save["FastRpgReload"])

	Combat:AddToggle('NoKunaiCooldown', {Text = 'No Kunai Cooldown', Default = _G.Save["NoKunaiCooldown"], Tooltip = 'NoKunaiCooldown'})

	Toggles.NoKunaiCooldown:OnChanged(function()
		_G.Save["NoKunaiCooldown"] = Toggles.NoKunaiCooldown.Value
		SaveSetting()
		for a,b in next, getgc(true) do
			if typeof(b) == 'table' and rawget(b, 'cooldown') then
				if _G.Save["NoKunaiCooldown"] then 
					rawset(b, 'cooldown', 0)
				else 
					rawset(b, 'cooldown', 0.2)
				end
			end
		end
	end)

	Toggles.NoKunaiCooldown:SetValue(_G.Save["NoKunaiCooldown"])


	Combat:AddToggle('NoRecoil', {Text = 'No Recoil', Default = _G.Save["NoRecoil"], Tooltip = 'NoRecoil'})

	Toggles.NoRecoil:OnChanged(function()
		_G.Save["NoRecoil"] = Toggles.NoRecoil.Value
		SaveSetting()
		for i,v in pairs(getgc(true)) do
			if typeof(v) == 'table' and rawget(v,'maxSpread') then
				if _G.Save["NoRecoil"] then
					v.recoilYMin = 0
					v.recoilZMin = 0
					v.recoilXMin = 0
					v.recoilYMax = 0
					v.recoilZMax = 0
					v.recoilXMax = 0
				end
			end
		end
	end)

	Toggles.NoRecoil:SetValue(_G.Save["NoRecoil"])

	Combat:AddToggle('NoCharge', {Text = 'No Charge', Default = _G.Save["NoCharge"], Tooltip = 'NoCharge'})

	Toggles.NoCharge:OnChanged(function()
		_G.Save["NoCharge"] = Toggles.NoCharge.Value
		SaveSetting()
		for a,b in next, getgc(true) do
			if typeof(b) == 'table' and rawget(b, 'chargeOnDuration') then
				if _G.Save["NoCharge"] then 
					rawset(b, 'chargeOnDuration', 0)
				else 
					rawset(b, 'chargeOnDuration', 0.45)
				end
			end
		end
	end)

	Toggles.NoCharge:SetValue(_G.Save["NoCharge"])

	Combat:AddToggle('NoDropOff', {Text = 'No Drop OFF', Default = _G.Save["NoDropOff"], Tooltip = 'NoDropOff'})

	Toggles.NoDropOff:OnChanged(function()
		_G.Save["NoDropOff"] = Toggles.NoDropOff.Value
		SaveSetting()

		for a,b in next, getgc(true) do
			if typeof(b) == 'table' and rawget(b, 'dropOffDistance') then
				if 	_G.Save["NoDropOff"] then 
					rawset(b, 'dropOffDistance',0)
				else 
					rawset(b, 'dropOffDistance', 150)
				end 
			end
		end
	end)

	Toggles.NoDropOff:SetValue(_G.Save["NoDropOff"])

	Combat:AddToggle('WallBang', {Text = 'Wall Bang', Default = _G.Save["WallBang"], Tooltip = 'WallBang'})

	game.CollectionService:AddTag(game:GetService("Workspace").Map,'CAMERA_COLLISION_IGNORE_LIST')
	if _G.Wallbang == nil then
		_G.Wallbang = true
	end
	if _G.Wallbang then
		game.CollectionService:AddTag(game:GetService("Workspace").Map,'RANGED_CASTER_IGNORE_LIST')
	end

	Toggles.WallBang:OnChanged(function()
		_G.Save["WallBang"] = Toggles.WallBang.Value
		SaveSetting()
		_G.Wallbang = _G.Save["WallBang"]
	end)



	Toggles.WallBang:SetValue(_G.Save["WallBang"])

	Combat:AddToggle('NoReloadTime', {Text = 'No Reload Time', Default = _G.Save["NoReloadTime"], Tooltip = 'NoReloadTime'})

	Toggles.NoReloadTime:OnChanged(function()
		_G.Save["NoReloadTime"] = Toggles.NoReloadTime.Value
		SaveSetting()
		for a,b in next, getgc(true) do
			if typeof(b) == 'table' and rawget(b, 'reloadTime') then
				if 	_G.Save["NoReloadTime"] then 
					rawset(b, 'reloadTime', 0)
				else 
					rawset(b, 'reloadTime', 0.8) 
				end 
			end
		end
	end)

	Toggles.NoReloadTime:SetValue(_G.Save["NoReloadTime"])


	--------------------------------

	-------AimBot-----------


	local AimBot = Tabs.Main:AddRightGroupbox('[ AimBot ]')

	AimBot:AddToggle('Aimbot', {Text = 'Aimbot', Default = _G.Save["Aimbot"], Tooltip = 'Aimbot'})

	Toggles.Aimbot:OnChanged(function()
		_G.Save["Aimbot"] = Toggles.Aimbot.Value
		SaveSetting()
	end)

	Toggles.Aimbot:SetValue(_G.Save["Aimbot"])


	AimBot:AddDropdown('SelectAimPart', {
		Values = {"Head","Torso"},
		Default = _G.Save["SelectAimPart"],
		Multi = false,
		Text = 'Select Aim Part',
	})

	AimBot:AddToggle('SlientAim', {Text = 'SlientAim', Default = _G.Save["SlientAim"], Tooltip = 'SlientAim'})

	Toggles.SlientAim:OnChanged(function()
		_G.Save["SlientAim"] = Toggles.SlientAim.Value
		SaveSetting()
	end)

	Toggles.SlientAim:SetValue(_G.Save["SlientAim"])

	AimBot:AddToggle('AutoShoot', {Text = 'AutoShoot', Default = _G.Save["AutoShoot"], Tooltip = 'AutoShoot'})

	Toggles.AutoShoot:OnChanged(function()
		_G.Save["AutoShoot"] = Toggles.AutoShoot.Value
		SaveSetting()
	end)

	Toggles.AutoShoot:SetValue(_G.Save["AutoShoot"])

	-------AimBot-----------

	---------Visual--------------
	local FPS = Tabs.Visual:AddRightGroupbox("[ CPU ]")
	FPS:AddToggle('WhiteScreen', {Text = 'White Screen', Default = _G.Save["WhiteScreen"], Tooltip = 'Less lag'})

	FPS:AddToggle('OpenFpsLock', {Text = 'Open Fps Lock', Default = _G.Save["OpenFpsLock"], Tooltip = 'Less lag'})



	Toggles.WhiteScreen:OnChanged(function()
		_G.Save["WhiteScreen"] = Toggles.WhiteScreen.Value
		SaveSetting()

	end)



	Toggles.OpenFpsLock:OnChanged(function()
		_G.Save["OpenFpsLock"] = Toggles.OpenFpsLock.Value
		SaveSetting()
	end)


	FPS:AddSlider('Fps', {
		Text = 'FpsLock',

		Default = 240,
		Min = 1,
		Max = 240,
		Rounding = 0,

		Compact = false,
	})

	Options.Fps:OnChanged(function()
		_G.Save["FpsLock"] = Options.Fps.Value
		SaveSetting()
	end)
	Options.Fps:SetValue(_G.Save["FpsLock"])


	local Visual = Tabs.Visual:AddLeftGroupbox("[ Visual ]")


	Visual:AddToggle('noclip', {Text = 'Noclip', Default = _G.Save["noclip"], Tooltip = 'noclip'})

	Toggles.noclip:OnChanged(function()
		_G.Save["noclip"] = Toggles.noclip.Value
		SaveSetting()
	end)

	Toggles.noclip:SetValue(_G.Save["noclip"])

	Visual:AddToggle('killsay', {Text = 'Kill Say', Default = _G.Save["killsay"], Tooltip = 'killsay'})

	Toggles.killsay:OnChanged(function()
		_G.Save["killsay"] = Toggles.killsay.Value
		SaveSetting()
	end)

	Toggles.killsay:SetValue(_G.Save["killsay"])

	Visual:AddToggle('hidename', {Text = 'Hide Name', Default = _G.Save["hidename"], Tooltip = 'hidename'})

	Toggles.hidename:OnChanged(function()
		_G.Save["hidename"] = Toggles.hidename.Value
		SaveSetting()
	end)

	Toggles.hidename:SetValue(_G.Save["hidename"])


	Visual:AddToggle('walkonwater', {Text = 'Walk On Water', Default = _G.Save["walkonwater"], Tooltip = 'walkonwater'})

	Toggles.walkonwater:OnChanged(function()
		_G.Save["walkonwater"] = Toggles.walkonwater.Value
		SaveSetting()
		for i,v2 in pairs(game.Workspace.Map:GetDescendants()) do
			if v2.Name == "WaterArea" then
				if _G.Save["walkonwater"] then
					v2.CanCollide = true
				else
					v2.CanCollide = false
				end
			end
		end
	end)

	Toggles.walkonwater:SetValue(_G.Save["walkonwater"])

	Visual:AddSlider('WalkSpeed', {
		Text = 'WalkSpeed',

		Default = _G.Save["WalkSpeed"],
		Min = 16,
		Max = 100,
		Rounding = 0,

		Compact = false,
	})
	Options.WalkSpeed:OnChanged(function()
		_G.Save["WalkSpeed"] = Options.WalkSpeed.Value
		SaveSetting()
	end)

	Visual:AddSlider('JumpPower', {
		Text = 'JumpPower',

		Default = _G.Save["JumpPower"],
		Min = 16,
		Max = 300,
		Rounding = 0,

		Compact = false,
	})
	Options.JumpPower:OnChanged(function()
		_G.Save["JumpPower"] = Options.JumpPower.Value
		SaveSetting()
	end)

	------------------------------------------------------------

	-------------------------------Script---------------------------

	local words = {
		"ez",
		"get good",
		"trash",
		"FenrilHubOnTop",
		"retard",
		"having issues playing the game?",
		"delete the game bro",
		"do you ever have problems with light users parrying your ds???",
		"how are you that bad??🤣🤣😂🤣🤣",
		"EZ EZ EZ EZ EZ",
		"I love your mom",
		"Try hard bro",
		"kid eazy",
		"do you know? you can't fight me noob",
		"nerds be like: OMG LOOK AT THAT HACKER!!! LET'S GET HIM!!!🤓🤓🤓",
		"how are you that bad??🤣😂",
		"my reaction to that information 😐",
		"OmG nO wAY a hACker!!!",
		"Super Idol的笑容",
		"fr?",
		'skill issue',
		"Bro got fake Jordans 💀",
		"Turi ip ip",
	}

	game.Players.LocalPlayer.leaderstats.Score.Changed:Connect(function()
		if _G.Save["killsay"] then 
			game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(words[math.random(1, #words)])
		end
	end)

	local mouse = game.Players.LocalPlayer:GetMouse()
	mouse.KeyDown:Connect(function(v)
		if _G.Save["InfJump"] and v == " " then 
			game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState(3)
		end
	end)
	spawn(function()
		while wait() do 
			pcall(function()
				----VisualLoop
				if _G.Save["noclip"] then 
					for i,v in pairs(Players.LocalPlayer.Character:GetDescendants()) do
						if v:IsA("BasePart") then
							v.CanCollide = false
						end
					end
				end
				if _G.Save["hidename"] then 
					remotes("UpdateIsCrouching", true)
				else 
					remotes("UpdateIsCrouching", false)  
				end
			end)
		end
	end)

	local function getClosestToMouse()
		local player, nearestDistance = nil, math.huge
		for i,v in pairs(Players:GetPlayers()) do
			if v ~= Players.LocalPlayer and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
				local root, visible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
				if visible then
					local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(root.X, root.Y)).Magnitude

					if distance < nearestDistance then
						nearestDistance = distance
						player = v
					end
				end
			end
		end
		return player
	end

	local function calculateArrowHitChance(v)
		-- i love the devforums
		-- they have everything i want
		local chance = math.floor(Random.new().NextNumber(Random.new(),0,1) * 100) / 100
		return chance <= math.floor(v) / 100
	end

	-- local holdingm2 = false 
	-- local aimbotLocked = false
	-- local retard = false
	-- local bee 
	-- local shot 
	-- bee = workspace:FindFirstChild("EffectsJunk").ChildAdded:Connect(function(p)
	--     if game.Players.LocalPlayer.PlayerGui:FindFirstChild("RoactUI"):FindFirstChild("MainMenu") then return end 
	-- 	local Tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
	-- 	if Tool then 
	-- 		if Tool:FindFirstChild("ClientAmmo") == nil then
	-- 			shot = false
	-- 			return
	-- 		end
	-- 		if shot and p:IsA("MeshPart") then
	-- 			ARROW = p
	-- 			Instance.new("SelectionBox",p).Adornee = p
	-- 			shot = false

	-- 		end
	-- 	end
	-- end)

	-- for i,v in pairs(getgc(true)) do
	-- 	if typeof(v) == "table" and rawget(v,"shoot") then
	-- 		local Old = v.shoot
	-- 		v.shoot = function(tbl)
	-- 			shot = true
	-- 			arrowsshooted = tbl.shotIdx
	-- 			closest = getClosestToMouse()
	-- 			return Old(tbl)
	-- 		end
	-- 	end
	-- 	if typeof(v) == "table" and rawget(v,"calculateFireDirection") then
	-- 		old = v.calculateFireDirection
	-- 		v.calculateFireDirection = function(p3,p4,p5,p6)
	-- 			local Tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
	-- 			if Tool:FindFirstChild("ClientAmmo") == nil then
	-- 				return old(p3,p4,p5,p6)
	-- 			end
	-- 			if _G.Save["SlientAim"] and shot then
	-- 				local closesta = getClosestToMouse()
	-- 				-- funny prediction (kinda shit lmao)
	-- 				local whereHeGonnaBe = closesta.Character.Head.CFrame + (closesta.Character.Head.Velocity * 0.19 + Vector3.new(0, .1, 0))
	-- 				return (CFrame.lookAt(Tool.Contents.Handle.FirePoint.WorldCFrame.Position, whereHeGonnaBe.Position)).LookVector * 30;
	-- 			end
	-- 			return old(p3,p4,p5,p6)
	-- 		end
	-- 	end
	-- end
	-- local function firehit(character)    
	-- 	local fakepos = character[_G.Save["SelectAimPart"]].Position + Vector3.new(math.random(1,5),math.random(1,5),math.random(1,5))
	-- 	local args = {
	-- 		[1] = Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"),
	-- 		[2] = character.Head,
	-- 		[3] = fakepos,
	-- 		[4] = character.Head.CFrame:ToObjectSpace(CFrame.new(fakepos)),
	-- 		[5] = math.random(0,1),
	-- 		[6] = tostring(arrowsshooted)
	-- 	}
	-- 	remotes["RangedHit"]:FireServer(unpack(args))
	-- end
	-- local silentaimhitchance = 100
	-- spawn(function()
	-- 	while wait() do 
	-- 		if _G.Save["SlientAim"] then 
	-- 			pcall(function()
	-- 				local bow = Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
	-- 				if closest then
	-- 					bruh.Adornee = getClosestToMouse().Character
	-- 				end
	-- 				if ARROW then
	-- 					if closest then
	-- 						if (ARROW.Position - closest.Character.HumanoidRootPart.Position).Magnitude <= 15 then
	-- 							if silentaimhitchance == 100 then
	-- 								firehit(closest.Character,ARROW)
	-- 								ARROW = nil
	-- 								shot = false
	-- 							else 
	-- 								local didIHitThat = calculateArrowHitChance(silentaimhitchance)
	-- 								if didIHitThat then
	-- 									firehit(closest.Character,ARROW)
	-- 									ARROW = nil
	-- 									shot = false
	-- 								end
	-- 							end
	-- 						end
	-- 					end
	-- 				end
	-- 			end)
	-- 		end
	-- 	end
	-- end)

	function Hop()
		local PlaceID = game.PlaceId
		local AllIDs = {}
		local foundAnything = ""
		local actualHour = os.date("!*t").hour
		local Deleted = false

		function TPReturner()
			local Site;
			if foundAnything == "" then
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			else
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
			end
			local ID = ""
			if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
				foundAnything = Site.nextPageCursor
			end
			local num = 0;
			for i,v in pairs(Site.data) do
				local Possible = true
				ID = tostring(v.id)
				if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _,Existing in pairs(AllIDs) do
						if num ~= 0 then
							if ID == tostring(Existing) then
								Possible = false
							end
						else
							if tonumber(actualHour) ~= tonumber(Existing) then
								local delFile = pcall(function()
									-- delfile("NotSameServers.json")
									AllIDs = {}
									table.insert(AllIDs, actualHour)
								end)
							end
						end
						num = num + 1
					end
					if Possible == true then
						table.insert(AllIDs, ID)
						task.wait()
						pcall(function()
							-- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
							task.wait()
							game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
						end)
						task.wait(4)
					end
				end
			end
		end

		function Teleport()
			while task.wait() do
				pcall(function()
					TPReturner()
					if foundAnything ~= "" then
						TPReturner()
					end
				end)
			end
		end

		Teleport()
	end
	local Airdrops = game:GetService("Workspace"):FindFirstChild("Airdrops")


	pcall(function()
		Airdrops.ChildAdded:Connect(function(o)
			if _G.Save["AutoAirDrop"] then 
				local Airdrop = o
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Airdrop:WaitForChild "Crate".Base.CFrame
				wait(.2)
				fireproximityprompt(Airdrop:WaitForChild "Crate".Hitbox.ProximityPrompt)
			end
		end)
	end)




	spawn(function()
		while wait() do 
			pcall(function()
				if _G.Save["AutoHopServerFarm"] then 
					wait(tonumber(_G.Save["TimeToHop"]))
					Hop()
					wait(50)
				end
			end)
		end
	end)
	getgenv().rejoin = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
		if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") then
			if _G.Save["AutoRejoin"] then 
				local tpservice= game:GetService("TeleportService")
				local plr = game.Players.LocalPlayer
				tpservice:Teleport(game.PlaceId, plr)
				wait(50)
			end
		end
	end) 

	spawn(function()
		RunService.Stepped:Connect(function()
			pcall(function()
				if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then
					game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").WalkSpeed = _G.Save["WalkSpeed"]
				else 
					game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").WalkSpeed = _G.Save["WalkSpeed"] + 10.56
				end
				game.Players.LocalPlayer.Character:FindFirstChild("Humanoid").JumpPower = _G.Save["JumpPower"]
			end)
		end)
	end)



	local function GetClosest() -- from devforum thanks for this
		local Character = game.Players.LocalPlayer.Character
		local HumanoidRootPart = Character and Character:FindFirstChild("HumanoidRootPart")
		if not (Character or HumanoidRootPart) then return end

		local TargetDistance = math.huge
		local Target

		for i,v in ipairs(game.Players:GetPlayers()) do
			if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
				local TargetHRP = v.Character.HumanoidRootPart
				local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - TargetHRP.Position).magnitude
				if mag < TargetDistance then
					TargetDistance = mag
					Target = v
				end
			end
		end

		return Target
	end

	local lp = game.Players.LocalPlayer

	local animationInfo = {}

	function getInfo(id)
		local success, info = pcall(function()
			return game:GetService("MarketplaceService"):GetProductInfo(id)
		end)
		if success then
			return info
		end
		return {Name=''}
	end
	local val = ""


	local AnimNames2 = {
		'Slash',
		'Swing',
		'Sword'
	}
	function block(player)
		game:service('VirtualInputManager'):SendKeyEvent(true, "F", false, game)
		wait()
		game:service('VirtualInputManager'):SendKeyEvent(false, "F", false, game)
	end
	local parry = false




	game:GetService("UserInputService").WindowFocused:connect(function()
		if _G.Save["WhiteScreen"] then
			game.RunService:Set3dRenderingEnabled(true)
		end
	end)
	game:GetService("UserInputService").WindowFocusReleased:connect(function()
		if _G.Save["WhiteScreen"] then
			game.RunService:Set3dRenderingEnabled(false)
		end
	end)
	spawn(function()
		while wait() do
			if _G.Save["OpenFpsLock"] then
				pcall(setfpscap, _G.Save["FpsLock"])
				pcall(set_fps_cap, _G.Save["FpsLock"])
			else
				pcall(setfpscap,240)
				pcall(set_fps_cap,240)
			end
		end
	end)

	workspace.PlayerCharacters.DescendantAdded:Connect(function(e)
		pcall(function()
			if (e:IsA("Sound") and e.SoundId == "rbxassetid://211059855") then
				if e.Parent.Parent.Name ~= game.Players.LocalPlayer.Name then
					local p = (e.Parent and e.Parent)
					if (game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
						local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-p.Position).Magnitude
						if (distance <= 15 and _G.Save["KillAura"]) then
							local Weapon
							for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
								if v:IsA("Tool") then
									if v:FindFirstChild("Hitboxes") ~= nil then
										Weapon = v
									end
								end
							end
							if Weapon then
								task.spawn(function()
									game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
									parry = true
									p:GetPropertyChangedSignal'Transparency':wait()
									parry = false 
									game.Players.LocalPlayer.Character.Humanoid:EquipTool(Weapon)
								end)
							end
						end
					end
				end
			end
		end)
	end)
	local function getClosestToMouse()
		local player, nearestDistance = nil, math.huge
		for i,v in pairs(Players:GetPlayers()) do
			if v ~= Players.LocalPlayer and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
				local root, visible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
				if visible then
					local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(root.X, root.Y)).Magnitude

					if distance < nearestDistance then
						nearestDistance = distance
						player = v
					end
				end
			end
		end
		return player
	end
	local UserInputService = game:GetService("UserInputService")
	game:GetService("UserInputService").InputBegan:Connect(function(v)
		if v.UserInputType == Enum.UserInputType.MouseButton2 then
			holdingm2 = true
			retard = getClosestToMouse()
		end
	end)

	game:GetService("UserInputService").InputEnded:Connect(function(v)
		if v.UserInputType == Enum.UserInputType.MouseButton2 then
			holdingm2 = false
			aimbotLocked = false
			UserInputService.MouseBehavior = Enum.MouseBehavior.Default
		end
	end)

	spawn(function()
		while wait() do 
			if _G.Save["Aimbot"] then 
				pcall(function()
					if holdingm2 then
						aimbotLocked = true
						if aimbotLocked and retard ~= nil then
							-- took this from some aimbot script (prediction is hard)
							local whereHeGonnaBe = retard.Character.HumanoidRootPart.CFrame + (retard.Character.HumanoidRootPart.Velocity * 0.19 + Vector3.new(0, .1, 0))
							workspace.CurrentCamera.CFrame = CFrame.lookAt(workspace.CurrentCamera.CFrame.Position, whereHeGonnaBe.Position)
							UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
						end
					end
				end)
			end 
		end
	end)




	local Weapon
	local xd = false 

	spawn(function()
		while wait() do 
			pcall(function()
				if _G.Save["AutoFarm"] then 
					if game.Players.LocalPlayer.PlayerGui:FindFirstChild("RoactUI"):FindFirstChild("MainMenu") then 
						keypress(0x20)
						keyrelease(0x20)
					end
					if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild('RoactUI'):FindFirstChild("CurrentRoundResults") and game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild('RoactUI'):FindFirstChild("CurrentRoundResults"):FindFirstChild("RoundResultsFrameContainer")  then 
						local Button = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild('RoactUI'):FindFirstChild("CurrentRoundResults"):FindFirstChild("RoundResultsFrameContainer"):FindFirstChild("CloseButton"):FindFirstChild("Button"):FindFirstChild("ButtonDetection")
						local events = { "MouseButton1Click", "MouseButton1Down", "Activated" }
						for i, v in next, events do firesignal(Button[v]) end
					end
				end
			end)
		end
	end)
	local ok = false
	local autoFarmEnabled = _G.Save["AutoFarm"]
	
	local pathfinding_service = game:GetService("PathfindingService")
	local Players = game:GetService("Players")
	local localPlayer = Players.LocalPlayer
	
	-- Function to calculate the path
	function getPath(destination)
		local agentParameters = {
			AgentHeight = 0.5,
			AgentRadius = 0.5,
			AgentCanJump = true,
		}
		local path1 = pathfinding_service:CreatePath(agentParameters)
		local startPosition = localPlayer.Character.HumanoidRootPart.Position
		local destinationPosition = destination:FindFirstChild("HumanoidRootPart").Position
	
		-- Compute path
		path1:ComputeAsync(startPosition, destinationPosition)
		
		if path1.Status == Enum.PathStatus.Complete then
			return path1
		else
			warn("Pathfinding failed or incomplete. Retrying...")
			return nil
		end
	end
	
	function isPlayerStuck(prevPosition, currentPosition)
		-- Check if the player hasn't moved significantly over time
		local distance = (currentPosition - prevPosition).Magnitude
		return distance < 2 -- Stuck if moved less than 2 studs
	end
	
	-- Function to perform raycast and check for obstructions in front
	function checkForWall(direction)
		local playerRoot = localPlayer.Character:FindFirstChild("HumanoidRootPart")
		if not playerRoot then return false end
	
		local rayParams = RaycastParams.new()
		rayParams.FilterDescendantsInstances = {localPlayer.Character} -- Ignore the player
		rayParams.FilterType = Enum.RaycastFilterType.Blacklist
	
		local rayDirection = direction.Unit * 5 -- Check 5 studs ahead
		local result = workspace:Raycast(playerRoot.Position, rayDirection, rayParams)
	
		if result then
			return true -- Obstacle detected
		else
			return false -- No obstacle
		end
	end
	
	-- Walk to function with stuck detection and jumping
	function walkto(destination)
		local path1 = getPath(destination)
		
		-- Check if a valid path is returned
		if not path1 then return end
	
		local humanoid = localPlayer.Character.Humanoid
		local playerRoot = localPlayer.Character:FindFirstChild("HumanoidRootPart")
		local prevPosition = playerRoot.Position
		local stuckTimer = 0
	
		for _, waypoint in pairs(path1:GetWaypoints()) do
			humanoid:MoveTo(waypoint.Position)
	
			-- Jump if needed
			if waypoint.Action == Enum.PathWaypointAction.Jump then
				humanoid.Jump = true
			end
	
			-- Wait until the waypoint is reached or timeout
			humanoid.MoveToFinished:Wait(1) -- 1 second wait
	
			local currentPosition = playerRoot.Position
			if isPlayerStuck(prevPosition, currentPosition) then
				stuckTimer = stuckTimer + 1
				
				-- If the player has been stuck for too long, check for obstacles or jump
				if stuckTimer >= 3 then -- Check after 3 intervals of being stuck
					local direction = (waypoint.Position - playerRoot.Position)
					
					if checkForWall(direction) then
						humanoid.Jump = true -- Jump to overcome the obstacle
					else
						warn("Player is stuck, recalculating path...")
						walkto(destination) -- Recalculate the path if not a wall
					end
					stuckTimer = 0
				end
			else
				stuckTimer = 0 -- Reset timer if the player moves
			end
	
			prevPosition = currentPosition -- Update previous position
	
			-- Check if the target is still valid and in range
			if not destination or destination.Humanoid.Health <= 0 then
				warn("Target is no longer valid.")
				return
			end
	
			-- Stop if AutoFarm is disabled during the process
			if not _G.Save["AutoFarm"] then
				warn("AutoFarm stopped.")
				return
			end
		end
	end
	
	-- Teleport function for AutoFarm
	function Tp(TChar)
		if TChar and TChar:FindFirstChild("HumanoidRootPart") then
			walkto(TChar)
		else
			warn("Target character is invalid.")
		end
	end
	
	-- Smart parry and xd management
	local function smartParry()
		while wait(1) do 
			if autoFarmEnabled then 
				xd = false 
				wait(60)
				parry = false
				if not ok then 
					xd = true
					parry = false
				end
			end
		end
	end
	
	-- Manage AutoFarm logic with teleportation
	local function manageFarm()
		while wait(0.1) do 
			pcall(function()
				autoFarmEnabled = _G.Save["AutoFarm"]
	
				if autoFarmEnabled then 
					local playerRoot = localPlayer.Character:FindFirstChild("HumanoidRootPart")
					if not playerRoot then return end
	
					for _, enemy in pairs(game:GetService("Workspace").PlayerCharacters:GetChildren()) do 
						if enemy:IsA("Model") and enemy.Name ~= localPlayer.Name then
							local enemyHumanoid = enemy:FindFirstChild("Humanoid")
							local enemyRoot = enemy:FindFirstChild("HumanoidRootPart")
	
							if enemyHumanoid and enemyHumanoid.Health > 0 and enemyRoot then
								local distance = (playerRoot.Position - enemyRoot.Position).Magnitude
								if distance <= 400 then 
									repeat 
										wait(0.1)
	
										local inMenu = localPlayer.PlayerGui:FindFirstChild("RoactUI") and localPlayer.PlayerGui.RoactUI:FindFirstChild("MainMenu")
										if inMenu then 
											keypress(0x20)
											keyrelease(0x20)
										else
											if distance > 25 then
												ok = false
												localPlayer.Character.Humanoid.Jump = true
												Tp(enemy) -- Use Tp to move towards the enemy smoothly
											else 
												ok = true
												-- Smooth angle increment for rotation
												angle = (angle + 0.04 * math.pi) % (2 * math.pi)
												playerRoot.CFrame = enemyRoot.CFrame * CFrame.new(math.cos(angle)*6, 0, math.sin(angle)*6)
	
												-- Disable collisions for all parts
												for _, part in pairs(localPlayer.Character:GetDescendants()) do
													if part:IsA("BasePart") then
														part.CanCollide = false
													end
												end
											end
										end
									until enemyHumanoid.Health <= 0 or xd == true or not autoFarmEnabled
								end
							end
						end
					end
				end
			end)
		end
	end
	
	-- Start the functions in separate threads
	spawn(smartParry)
	spawn(manageFarm)

	LPH_NO_VIRTUALIZE(function()
		local o;
		o = hookmetamethod(game,"__namecall",function(self,...)
			local args = {...}
			if self.Name == "StartFallDamage" or self.Name == "TakeFallDamage" and _G.Save["NoFallDamage"] then
				return
			elseif self.Name == "GotHitRE" and _G.Save["AntiDamage"] then 
				return
			end
			return o(self,...)
		end)
	end)()

	return Library
end)()

